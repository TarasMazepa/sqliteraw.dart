name: SQLite Cross-Platform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Common SQLite compile-time options based on official documentation
  # Source: https://www.sqlite.org/howtocompile.html
  SQLITE_COMPILE_TIME_OPTIONS: >-
    -O3
    -DSQLITE_ENABLE_FTS4
    -DSQLITE_ENABLE_FTS5
    -DSQLITE_ENABLE_RTREE
    -DSQLITE_ENABLE_GEOPOLY

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            name: "Linux x86_64"
            platform: "linux-x86_64"
            clang_target: "native"
            lib_ext: "so"
            lib_flags: "-fPIC -shared"
            lib_file: "sqlite3.so"
            exe_file: "sqlite3"
            extra_flags: ""
            link_flags: "-lpthread -ldl -lm"
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y clang
            
          # Linux ARM64
          - os: ubuntu-latest
            name: "Linux ARM64"
            platform: "linux-aarch64"
            clang_target: "aarch64-linux-gnu"
            lib_ext: "so"
            lib_flags: "-fPIC -shared"
            lib_file: "sqlite3.so"
            exe_file: "sqlite3"
            extra_flags: ""
            link_flags: "-lpthread -ldl -lm"
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y clang gcc-aarch64-linux-gnu
            
          # Windows x86_64
          - os: windows-latest
            name: "Windows x86_64"
            platform: "windows-x86_64"
            clang_target: "native"
            lib_ext: "dll"
            lib_flags: "-shared"
            lib_file: "sqlite3.dll"
            exe_file: "sqlite3.exe"
            extra_flags: "-DSQLITE_API=__declspec(dllexport)"
            link_flags: ""
            setup_script: |
              clang --version
            
          # Windows ARM64
          - os: windows-latest
            name: "Windows ARM64"
            platform: "windows-aarch64"
            clang_target: "aarch64-pc-windows-msvc"
            lib_ext: "dll"
            lib_flags: "-shared"
            lib_file: "sqlite3.dll"
            exe_file: "sqlite3.exe"
            extra_flags: "-DSQLITE_API=__declspec(dllexport)"
            link_flags: ""
            setup_script: |
              clang --version
            
          # macOS Apple Silicon
          - os: macos-latest
            name: "macOS Apple Silicon"
            platform: "macos-aarch64"
            clang_target: "native"
            lib_ext: "dylib"
            lib_flags: "-dynamiclib"
            lib_file: "sqlite3.dylib"
            exe_file: "sqlite3"
            extra_flags: ""
            link_flags: "-lm -lpthread"
            setup_script: |
              clang --version
            
          # macOS Intel
          - os: macos-13
            name: "macOS Intel"
            platform: "macos-x86_64"
            clang_target: "native"
            lib_ext: "dylib"
            lib_flags: "-dynamiclib"
            lib_file: "sqlite3.dylib"
            exe_file: "sqlite3"
            extra_flags: ""
            link_flags: "-lm -lpthread"
            setup_script: |
              clang --version

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup build environment
      run: ${{ matrix.setup_script }}

    - name: Create build directories
      run: |
        mkdir -p "build/${{ matrix.platform }}"
      shell: bash

    - name: Build SQLite targets
      run: |
        echo "Building ${{ matrix.platform }}..."
        
        # Set target flag for clang
        if [ "${{ matrix.clang_target }}" = "native" ]; then
          target_flag=""
        else
          target_flag="--target=${{ matrix.clang_target }}"
        fi
        
        # Build shared library
        clang $target_flag ${{ matrix.lib_flags }} \
          ${{ matrix.extra_flags }} \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          ${{ matrix.link_flags }} \
          -o "build/${{ matrix.platform }}/${{ matrix.lib_file }}"
        
        # Build command-line tool
        clang $target_flag \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          ${{ matrix.link_flags }} \
          -o "build/${{ matrix.platform }}/${{ matrix.exe_file }}"
        
        echo "Completed ${{ matrix.platform }}"
      shell: bash