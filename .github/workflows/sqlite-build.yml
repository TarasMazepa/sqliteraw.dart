name: sqlite-build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  SQLITE_COMPILE_TIME_OPTIONS: >-
    -O3
    -DSQLITE_ENABLE_FTS4
    -DSQLITE_ENABLE_FTS5
    -DSQLITE_ENABLE_RTREE
    -DSQLITE_ENABLE_GEOPOLY

jobs:
  sqlite-build-linux-arm64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4

    - run: |
        sudo apt-get update
        sudo apt-get install -y clang

    - run: mkdir -p "build/linux-aarch64"

    - run: |
        # Build shared library
        clang -fPIC -shared \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          -lpthread -ldl -lm \
          -o "build/linux-aarch64/sqlite3.so"
        
        # Build command-line tool
        clang \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -lpthread -ldl -lm \
          -o "build/linux-aarch64/sqlite3"
    
  sqlite-build-linux-x86_64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - run: |
        sudo apt-get update
        sudo apt-get install -y clang

    - run: mkdir -p "build/linux-x86_64"

    - run: |
        # Build shared library
        clang -fPIC -shared \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          -lpthread -ldl -lm \
          -o "build/linux-x86_64/sqlite3.so"
        
        # Build command-line tool
        clang \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -lpthread -ldl -lm \
          -o "build/linux-x86_64/sqlite3"

  sqlite-build-mac-apple-silicon:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - run: mkdir -p "build/macos-aarch64"

    - run: |
        # Build shared library
        clang -dynamiclib \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          -lm -lpthread \
          -o "build/macos-aarch64/sqlite3.dylib"
        
        # Build command-line tool
        clang \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -lm -lpthread \
          -o "build/macos-aarch64/sqlite3"

  sqlite-build-mac-intel:
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4

    - run: mkdir -p "build/macos-x86_64"

    - run: |
        # Build shared library
        clang -dynamiclib \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          -lm -lpthread \
          -o "build/macos-x86_64/sqlite3.dylib"
        
        # Build command-line tool
        clang \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -lm -lpthread \
          -o "build/macos-x86_64/sqlite3"

  sqlite-build-windows-arm64:
    runs-on: windows-11-arm

    steps:
    - uses: actions/checkout@v4

    - run: mkdir -p "build/windows-aarch64"
      shell: bash

    - run: |
        # Build shared library
        clang -shared \
          -DSQLITE_API=__declspec\(dllexport\) \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          -o "build/windows-aarch64/sqlite3.dll"
        
        # Build command-line tool
        clang \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -o "build/windows-aarch64/sqlite3.exe"
      shell: bash

  sqlite-build-windows-x86_64:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - run: mkdir -p "build/windows-x86_64"
      shell: bash

    - run: |
        # Build shared library
        clang -shared \
          -DSQLITE_API=__declspec\(dllexport\) \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c \
          -o "build/windows-x86_64/sqlite3.dll"
        
        # Build command-line tool
        clang \
          ${{ env.SQLITE_COMPILE_TIME_OPTIONS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -o "build/windows-x86_64/sqlite3.exe"
      shell: bash