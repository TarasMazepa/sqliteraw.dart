name: sqlite-build.yml

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Common SQLite compile-time options based on official documentation
  SQLITE_CFLAGS: >-
    -O3
    -DSQLITE_ENABLE_FTS4
    -DSQLITE_ENABLE_FTS5
    -DSQLITE_ENABLE_RTREE
    -DSQLITE_ENABLE_GEOPOLY
  
  # Unix/Linux linking flags
  UNIX_LDFLAGS: "-lpthread -ldl -lm"

jobs:
  sqlite-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install cross-compilation toolchains
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang \
          lld \
          gcc-mingw-w64-x86-64 \
          libc6-dev-i386

    - name: Create build directories
      run: |
        mkdir -p build/linux-x86_64
        mkdir -p build/windows-x86_64
        mkdir -p build/macos-x86_64
        mkdir -p build/macos-aarch64

    # Linux x86_64 build
    - name: Compile SQLite for Linux x86_64 (shared library)
      run: |
        clang --target=x86_64-linux-gnu \
          -shared \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c \
          ${{ env.UNIX_LDFLAGS }} \
          -o build/linux-x86_64/sqlite3.so

    - name: Compile SQLite for Linux x86_64 (executable)
      run: |
        clang --target=x86_64-linux-gnu \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          ${{ env.UNIX_LDFLAGS }} \
          -o build/linux-x86_64/sqlite3

    # Windows x86_64 build (using MinGW)
    - name: Compile SQLite for Windows x86_64 (shared library)
      run: |
        clang --target=x86_64-w64-mingw32 \
          -shared \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c \
          -o build/windows-x86_64/sqlite3.dll

    - name: Compile SQLite for Windows x86_64 (executable)
      run: |
        clang --target=x86_64-w64-mingw32 \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          -o build/windows-x86_64/sqlite3.exe

    # macOS x86_64 build
    - name: Compile SQLite for macOS x86_64 (shared library)
      run: |
        clang --target=x86_64-apple-darwin \
          -shared \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c \
          ${{ env.UNIX_LDFLAGS }} \
          -o build/macos-x86_64/sqlite3.dylib

    - name: Compile SQLite for macOS x86_64 (executable)
      run: |
        clang --target=x86_64-apple-darwin \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          ${{ env.UNIX_LDFLAGS }} \
          -o build/macos-x86_64/sqlite3

    # macOS ARM64 build
    - name: Compile SQLite for macOS ARM64 (shared library)
      run: |
        clang --target=aarch64-apple-darwin \
          -shared \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c \
          ${{ env.UNIX_LDFLAGS }} \
          -o build/macos-aarch64/sqlite3.dylib

    - name: Compile SQLite for macOS ARM64 (executable)
      run: |
        clang --target=aarch64-apple-darwin \
          ${{ env.SQLITE_CFLAGS }} \
          sqlite/sqlite3.c sqlite/shell.c \
          ${{ env.UNIX_LDFLAGS }} \
          -o build/macos-aarch64/sqlite3

    - name: Verify all build artifacts
      run: |
        echo "=== Linux x86_64 ==="
        ls -la build/linux-x86_64/
        file build/linux-x86_64/sqlite3.so
        file build/linux-x86_64/sqlite3
        
        echo "=== Windows x86_64 ==="
        ls -la build/windows-x86_64/
        file build/windows-x86_64/sqlite3.dll
        file build/windows-x86_64/sqlite3.exe
        
        echo "=== macOS x86_64 ==="
        ls -la build/macos-x86_64/
        file build/macos-x86_64/sqlite3.dylib
        file build/macos-x86_64/sqlite3
        
        echo "=== macOS ARM64 ==="
        ls -la build/macos-aarch64/
        file build/macos-aarch64/sqlite3.dylib
        file build/macos-aarch64/sqlite3

    - name: Test Linux SQLite executable
      run: |
        build/linux-x86_64/sqlite3 --version