// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _sqlite3_version =
      _lookup<ffi.Pointer<ffi.Char>>('sqlite3_version');

  ffi.Pointer<ffi.Char> get sqlite3_version => _sqlite3_version.value;

  set sqlite3_version(ffi.Pointer<ffi.Char> value) =>
      _sqlite3_version.value = value;

  ffi.Pointer<ffi.Char> sqlite3_libversion() {
    return _sqlite3_libversion();
  }

  late final _sqlite3_libversionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'sqlite3_libversion');
  late final _sqlite3_libversion =
      _sqlite3_libversionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> sqlite3_sourceid() {
    return _sqlite3_sourceid();
  }

  late final _sqlite3_sourceidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'sqlite3_sourceid');
  late final _sqlite3_sourceid =
      _sqlite3_sourceidPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int sqlite3_libversion_number() {
    return _sqlite3_libversion_number();
  }

  late final _sqlite3_libversion_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'sqlite3_libversion_number');
  late final _sqlite3_libversion_number =
      _sqlite3_libversion_numberPtr.asFunction<int Function()>();

  int sqlite3_compileoption_used(
    ffi.Pointer<ffi.Char> zOptName,
  ) {
    return _sqlite3_compileoption_used(
      zOptName,
    );
  }

  late final _sqlite3_compileoption_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'sqlite3_compileoption_used');
  late final _sqlite3_compileoption_used = _sqlite3_compileoption_usedPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sqlite3_compileoption_get(
    int N,
  ) {
    return _sqlite3_compileoption_get(
      N,
    );
  }

  late final _sqlite3_compileoption_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'sqlite3_compileoption_get');
  late final _sqlite3_compileoption_get = _sqlite3_compileoption_getPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int sqlite3_threadsafe() {
    return _sqlite3_threadsafe();
  }

  late final _sqlite3_threadsafePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_threadsafe');
  late final _sqlite3_threadsafe =
      _sqlite3_threadsafePtr.asFunction<int Function()>();

  int sqlite3_close(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_close(
      arg0,
    );
  }

  late final _sqlite3_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_close');
  late final _sqlite3_close =
      _sqlite3_closePtr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_close_v2(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_close_v2(
      arg0,
    );
  }

  late final _sqlite3_close_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_close_v2');
  late final _sqlite3_close_v2 =
      _sqlite3_close_v2Ptr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_exec(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> sql,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Int,
                    ffi.Pointer<ffi.Pointer<ffi.Char>>,
                    ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
        callback,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errmsg,
  ) {
    return _sqlite3_exec(
      arg0,
      sql,
      callback,
      arg3,
      errmsg,
    );
  }

  late final _sqlite3_execPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Pointer<ffi.Char>>,
                          ffi.Pointer<ffi.Pointer<ffi.Char>>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_exec');
  late final _sqlite3_exec = _sqlite3_execPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Int,
                      ffi.Pointer<ffi.Pointer<ffi.Char>>,
                      ffi.Pointer<ffi.Pointer<ffi.Char>>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int sqlite3_initialize() {
    return _sqlite3_initialize();
  }

  late final _sqlite3_initializePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_initialize');
  late final _sqlite3_initialize =
      _sqlite3_initializePtr.asFunction<int Function()>();

  int sqlite3_shutdown() {
    return _sqlite3_shutdown();
  }

  late final _sqlite3_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_shutdown');
  late final _sqlite3_shutdown =
      _sqlite3_shutdownPtr.asFunction<int Function()>();

  int sqlite3_os_init() {
    return _sqlite3_os_init();
  }

  late final _sqlite3_os_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_os_init');
  late final _sqlite3_os_init =
      _sqlite3_os_initPtr.asFunction<int Function()>();

  int sqlite3_os_end() {
    return _sqlite3_os_end();
  }

  late final _sqlite3_os_endPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_os_end');
  late final _sqlite3_os_end = _sqlite3_os_endPtr.asFunction<int Function()>();

  int sqlite3_config(
    int arg0,
  ) {
    return _sqlite3_config(
      arg0,
    );
  }

  late final _sqlite3_configPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sqlite3_config');
  late final _sqlite3_config =
      _sqlite3_configPtr.asFunction<int Function(int)>();

  int sqlite3_db_config(
    ffi.Pointer<sqlite3> arg0,
    int op,
  ) {
    return _sqlite3_db_config(
      arg0,
      op,
    );
  }

  late final _sqlite3_db_configPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int)>>(
      'sqlite3_db_config');
  late final _sqlite3_db_config = _sqlite3_db_configPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_extended_result_codes(
    ffi.Pointer<sqlite3> arg0,
    int onoff,
  ) {
    return _sqlite3_extended_result_codes(
      arg0,
      onoff,
    );
  }

  late final _sqlite3_extended_result_codesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int)>>(
      'sqlite3_extended_result_codes');
  late final _sqlite3_extended_result_codes = _sqlite3_extended_result_codesPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_last_insert_rowid(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_last_insert_rowid(
      arg0,
    );
  }

  late final _sqlite3_last_insert_rowidPtr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_last_insert_rowid');
  late final _sqlite3_last_insert_rowid = _sqlite3_last_insert_rowidPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  void sqlite3_set_last_insert_rowid(
    ffi.Pointer<sqlite3> arg0,
    int arg1,
  ) {
    return _sqlite3_set_last_insert_rowid(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_set_last_insert_rowidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3>,
              sqlite3_int64)>>('sqlite3_set_last_insert_rowid');
  late final _sqlite3_set_last_insert_rowid = _sqlite3_set_last_insert_rowidPtr
      .asFunction<void Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_changes(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_changes(
      arg0,
    );
  }

  late final _sqlite3_changesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_changes');
  late final _sqlite3_changes =
      _sqlite3_changesPtr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_changes64(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_changes64(
      arg0,
    );
  }

  late final _sqlite3_changes64Ptr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_changes64');
  late final _sqlite3_changes64 =
      _sqlite3_changes64Ptr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_total_changes(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_total_changes(
      arg0,
    );
  }

  late final _sqlite3_total_changesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_total_changes');
  late final _sqlite3_total_changes = _sqlite3_total_changesPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_total_changes64(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_total_changes64(
      arg0,
    );
  }

  late final _sqlite3_total_changes64Ptr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_total_changes64');
  late final _sqlite3_total_changes64 = _sqlite3_total_changes64Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  void sqlite3_interrupt(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_interrupt(
      arg0,
    );
  }

  late final _sqlite3_interruptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_interrupt');
  late final _sqlite3_interrupt =
      _sqlite3_interruptPtr.asFunction<void Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_is_interrupted(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_is_interrupted(
      arg0,
    );
  }

  late final _sqlite3_is_interruptedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_is_interrupted');
  late final _sqlite3_is_interrupted = _sqlite3_is_interruptedPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_complete(
    ffi.Pointer<ffi.Char> sql,
  ) {
    return _sqlite3_complete(
      sql,
    );
  }

  late final _sqlite3_completePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'sqlite3_complete');
  late final _sqlite3_complete =
      _sqlite3_completePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sqlite3_complete16(
    ffi.Pointer<ffi.Void> sql,
  ) {
    return _sqlite3_complete16(
      sql,
    );
  }

  late final _sqlite3_complete16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'sqlite3_complete16');
  late final _sqlite3_complete16 =
      _sqlite3_complete16Ptr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int sqlite3_busy_handler(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<
            ffi
            .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_busy_handler(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_busy_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_busy_handler');
  late final _sqlite3_busy_handler = _sqlite3_busy_handlerPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_busy_timeout(
    ffi.Pointer<sqlite3> arg0,
    int ms,
  ) {
    return _sqlite3_busy_timeout(
      arg0,
      ms,
    );
  }

  late final _sqlite3_busy_timeoutPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int)>>(
      'sqlite3_busy_timeout');
  late final _sqlite3_busy_timeout = _sqlite3_busy_timeoutPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_setlk_timeout(
    ffi.Pointer<sqlite3> arg0,
    int ms,
    int flags,
  ) {
    return _sqlite3_setlk_timeout(
      arg0,
      ms,
      flags,
    );
  }

  late final _sqlite3_setlk_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int,
              ffi.Int)>>('sqlite3_setlk_timeout');
  late final _sqlite3_setlk_timeout = _sqlite3_setlk_timeoutPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int, int)>();

  int sqlite3_get_table(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSql,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> pazResult,
    ffi.Pointer<ffi.Int> pnRow,
    ffi.Pointer<ffi.Int> pnColumn,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzErrmsg,
  ) {
    return _sqlite3_get_table(
      db,
      zSql,
      pazResult,
      pnRow,
      pnColumn,
      pzErrmsg,
    );
  }

  late final _sqlite3_get_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_get_table');
  late final _sqlite3_get_table = _sqlite3_get_tablePtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void sqlite3_free_table(
    ffi.Pointer<ffi.Pointer<ffi.Char>> result,
  ) {
    return _sqlite3_free_table(
      result,
    );
  }

  late final _sqlite3_free_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_free_table');
  late final _sqlite3_free_table = _sqlite3_free_tablePtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> sqlite3_mprintf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _sqlite3_mprintf(
      arg0,
    );
  }

  late final _sqlite3_mprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('sqlite3_mprintf');
  late final _sqlite3_mprintf = _sqlite3_mprintfPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sqlite3_vmprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _sqlite3_vmprintf(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_vmprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('sqlite3_vmprintf');
  late final _sqlite3_vmprintf = _sqlite3_vmprintfPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> sqlite3_snprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _sqlite3_snprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_snprintf');
  late final _sqlite3_snprintf = _sqlite3_snprintfPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sqlite3_vsnprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    return _sqlite3_vsnprintf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('sqlite3_vsnprintf');
  late final _sqlite3_vsnprintf = _sqlite3_vsnprintfPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Void> sqlite3_malloc(
    int arg0,
  ) {
    return _sqlite3_malloc(
      arg0,
    );
  }

  late final _sqlite3_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'sqlite3_malloc');
  late final _sqlite3_malloc =
      _sqlite3_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> sqlite3_malloc64(
    int arg0,
  ) {
    return _sqlite3_malloc64(
      arg0,
    );
  }

  late final _sqlite3_malloc64Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(sqlite3_uint64)>>(
      'sqlite3_malloc64');
  late final _sqlite3_malloc64 =
      _sqlite3_malloc64Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> sqlite3_realloc(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _sqlite3_realloc(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('sqlite3_realloc');
  late final _sqlite3_realloc = _sqlite3_reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_realloc64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _sqlite3_realloc64(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_realloc64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, sqlite3_uint64)>>('sqlite3_realloc64');
  late final _sqlite3_realloc64 = _sqlite3_realloc64Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void sqlite3_free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _sqlite3_free(
      arg0,
    );
  }

  late final _sqlite3_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sqlite3_free');
  late final _sqlite3_free =
      _sqlite3_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int sqlite3_msize(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _sqlite3_msize(
      arg0,
    );
  }

  late final _sqlite3_msizePtr = _lookup<
          ffi.NativeFunction<sqlite3_uint64 Function(ffi.Pointer<ffi.Void>)>>(
      'sqlite3_msize');
  late final _sqlite3_msize =
      _sqlite3_msizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int sqlite3_memory_used() {
    return _sqlite3_memory_used();
  }

  late final _sqlite3_memory_usedPtr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function()>>(
          'sqlite3_memory_used');
  late final _sqlite3_memory_used =
      _sqlite3_memory_usedPtr.asFunction<int Function()>();

  int sqlite3_memory_highwater(
    int resetFlag,
  ) {
    return _sqlite3_memory_highwater(
      resetFlag,
    );
  }

  late final _sqlite3_memory_highwaterPtr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function(ffi.Int)>>(
          'sqlite3_memory_highwater');
  late final _sqlite3_memory_highwater =
      _sqlite3_memory_highwaterPtr.asFunction<int Function(int)>();

  void sqlite3_randomness(
    int N,
    ffi.Pointer<ffi.Void> P,
  ) {
    return _sqlite3_randomness(
      N,
      P,
    );
  }

  late final _sqlite3_randomnessPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'sqlite3_randomness');
  late final _sqlite3_randomness = _sqlite3_randomnessPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  int sqlite3_set_authorizer(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Int,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>)>>
        xAuth,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _sqlite3_set_authorizer(
      arg0,
      xAuth,
      pUserData,
    );
  }

  late final _sqlite3_set_authorizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_set_authorizer');
  late final _sqlite3_set_authorizer = _sqlite3_set_authorizerPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Int,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sqlite3_trace(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>
        xTrace,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_trace(
      arg0,
      xTrace,
      arg2,
    );
  }

  late final _sqlite3_tracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_trace');
  late final _sqlite3_trace = _sqlite3_tracePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sqlite3_profile(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                    sqlite3_uint64)>>
        xProfile,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_profile(
      arg0,
      xProfile,
      arg2,
    );
  }

  late final _sqlite3_profilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, sqlite3_uint64)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_profile');
  late final _sqlite3_profile = _sqlite3_profilePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Char>, sqlite3_uint64)>>,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_trace_v2(
    ffi.Pointer<sqlite3> arg0,
    int uMask,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        xCallback,
    ffi.Pointer<ffi.Void> pCtx,
  ) {
    return _sqlite3_trace_v2(
      arg0,
      uMask,
      xCallback,
      pCtx,
    );
  }

  late final _sqlite3_trace_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.UnsignedInt,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_trace_v2');
  late final _sqlite3_trace_v2 = _sqlite3_trace_v2Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void sqlite3_progress_handler(
    ffi.Pointer<sqlite3> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _sqlite3_progress_handler(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_progress_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_progress_handler');
  late final _sqlite3_progress_handler =
      _sqlite3_progress_handlerPtr.asFunction<
          void Function(
              ffi.Pointer<sqlite3>,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int sqlite3_open(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<sqlite3>> ppDb,
  ) {
    return _sqlite3_open(
      filename,
      ppDb,
    );
  }

  late final _sqlite3_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<sqlite3>>)>>('sqlite3_open');
  late final _sqlite3_open = _sqlite3_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<sqlite3>>)>();

  int sqlite3_open16(
    ffi.Pointer<ffi.Void> filename,
    ffi.Pointer<ffi.Pointer<sqlite3>> ppDb,
  ) {
    return _sqlite3_open16(
      filename,
      ppDb,
    );
  }

  late final _sqlite3_open16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<sqlite3>>)>>('sqlite3_open16');
  late final _sqlite3_open16 = _sqlite3_open16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<sqlite3>>)>();

  int sqlite3_open_v2(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<sqlite3>> ppDb,
    int flags,
    ffi.Pointer<ffi.Char> zVfs,
  ) {
    return _sqlite3_open_v2(
      filename,
      ppDb,
      flags,
      zVfs,
    );
  }

  late final _sqlite3_open_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<sqlite3>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('sqlite3_open_v2');
  late final _sqlite3_open_v2 = _sqlite3_open_v2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<sqlite3>>,
          int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sqlite3_uri_parameter(
    sqlite3_filename z,
    ffi.Pointer<ffi.Char> zParam,
  ) {
    return _sqlite3_uri_parameter(
      z,
      zParam,
    );
  }

  late final _sqlite3_uri_parameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(sqlite3_filename,
              ffi.Pointer<ffi.Char>)>>('sqlite3_uri_parameter');
  late final _sqlite3_uri_parameter = _sqlite3_uri_parameterPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          sqlite3_filename, ffi.Pointer<ffi.Char>)>();

  int sqlite3_uri_boolean(
    sqlite3_filename z,
    ffi.Pointer<ffi.Char> zParam,
    int bDefault,
  ) {
    return _sqlite3_uri_boolean(
      z,
      zParam,
      bDefault,
    );
  }

  late final _sqlite3_uri_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(sqlite3_filename, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('sqlite3_uri_boolean');
  late final _sqlite3_uri_boolean = _sqlite3_uri_booleanPtr
      .asFunction<int Function(sqlite3_filename, ffi.Pointer<ffi.Char>, int)>();

  int sqlite3_uri_int64(
    sqlite3_filename arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _sqlite3_uri_int64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_uri_int64Ptr = _lookup<
      ffi.NativeFunction<
          sqlite3_int64 Function(sqlite3_filename, ffi.Pointer<ffi.Char>,
              sqlite3_int64)>>('sqlite3_uri_int64');
  late final _sqlite3_uri_int64 = _sqlite3_uri_int64Ptr
      .asFunction<int Function(sqlite3_filename, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> sqlite3_uri_key(
    sqlite3_filename z,
    int N,
  ) {
    return _sqlite3_uri_key(
      z,
      N,
    );
  }

  late final _sqlite3_uri_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              sqlite3_filename, ffi.Int)>>('sqlite3_uri_key');
  late final _sqlite3_uri_key = _sqlite3_uri_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename, int)>();

  ffi.Pointer<ffi.Char> sqlite3_filename_database(
    sqlite3_filename arg0,
  ) {
    return _sqlite3_filename_database(
      arg0,
    );
  }

  late final _sqlite3_filename_databasePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename)>>(
      'sqlite3_filename_database');
  late final _sqlite3_filename_database = _sqlite3_filename_databasePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename)>();

  ffi.Pointer<ffi.Char> sqlite3_filename_journal(
    sqlite3_filename arg0,
  ) {
    return _sqlite3_filename_journal(
      arg0,
    );
  }

  late final _sqlite3_filename_journalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename)>>(
      'sqlite3_filename_journal');
  late final _sqlite3_filename_journal = _sqlite3_filename_journalPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename)>();

  ffi.Pointer<ffi.Char> sqlite3_filename_wal(
    sqlite3_filename arg0,
  ) {
    return _sqlite3_filename_wal(
      arg0,
    );
  }

  late final _sqlite3_filename_walPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename)>>(
      'sqlite3_filename_wal');
  late final _sqlite3_filename_wal = _sqlite3_filename_walPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(sqlite3_filename)>();

  ffi.Pointer<sqlite3_file> sqlite3_database_file_object(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _sqlite3_database_file_object(
      arg0,
    );
  }

  late final _sqlite3_database_file_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_file> Function(
              ffi.Pointer<ffi.Char>)>>('sqlite3_database_file_object');
  late final _sqlite3_database_file_object = _sqlite3_database_file_objectPtr
      .asFunction<ffi.Pointer<sqlite3_file> Function(ffi.Pointer<ffi.Char>)>();

  sqlite3_filename sqlite3_create_filename(
    ffi.Pointer<ffi.Char> zDatabase,
    ffi.Pointer<ffi.Char> zJournal,
    ffi.Pointer<ffi.Char> zWal,
    int nParam,
    ffi.Pointer<ffi.Pointer<ffi.Char>> azParam,
  ) {
    return _sqlite3_create_filename(
      zDatabase,
      zJournal,
      zWal,
      nParam,
      azParam,
    );
  }

  late final _sqlite3_create_filenamePtr = _lookup<
      ffi.NativeFunction<
          sqlite3_filename Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_create_filename');
  late final _sqlite3_create_filename = _sqlite3_create_filenamePtr.asFunction<
      sqlite3_filename Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void sqlite3_free_filename(
    sqlite3_filename arg0,
  ) {
    return _sqlite3_free_filename(
      arg0,
    );
  }

  late final _sqlite3_free_filenamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sqlite3_filename)>>(
          'sqlite3_free_filename');
  late final _sqlite3_free_filename =
      _sqlite3_free_filenamePtr.asFunction<void Function(sqlite3_filename)>();

  int sqlite3_errcode(
    ffi.Pointer<sqlite3> db,
  ) {
    return _sqlite3_errcode(
      db,
    );
  }

  late final _sqlite3_errcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_errcode');
  late final _sqlite3_errcode =
      _sqlite3_errcodePtr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_extended_errcode(
    ffi.Pointer<sqlite3> db,
  ) {
    return _sqlite3_extended_errcode(
      db,
    );
  }

  late final _sqlite3_extended_errcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_extended_errcode');
  late final _sqlite3_extended_errcode = _sqlite3_extended_errcodePtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  ffi.Pointer<ffi.Char> sqlite3_errmsg(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_errmsg(
      arg0,
    );
  }

  late final _sqlite3_errmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3>)>>('sqlite3_errmsg');
  late final _sqlite3_errmsg = _sqlite3_errmsgPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3>)>();

  ffi.Pointer<ffi.Void> sqlite3_errmsg16(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_errmsg16(
      arg0,
    );
  }

  late final _sqlite3_errmsg16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>)>>('sqlite3_errmsg16');
  late final _sqlite3_errmsg16 = _sqlite3_errmsg16Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3>)>();

  ffi.Pointer<ffi.Char> sqlite3_errstr(
    int arg0,
  ) {
    return _sqlite3_errstr(
      arg0,
    );
  }

  late final _sqlite3_errstrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'sqlite3_errstr');
  late final _sqlite3_errstr =
      _sqlite3_errstrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int sqlite3_error_offset(
    ffi.Pointer<sqlite3> db,
  ) {
    return _sqlite3_error_offset(
      db,
    );
  }

  late final _sqlite3_error_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_error_offset');
  late final _sqlite3_error_offset =
      _sqlite3_error_offsetPtr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_limit(
    ffi.Pointer<sqlite3> arg0,
    int id,
    int newVal,
  ) {
    return _sqlite3_limit(
      arg0,
      id,
      newVal,
    );
  }

  late final _sqlite3_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>, ffi.Int, ffi.Int)>>('sqlite3_limit');
  late final _sqlite3_limit = _sqlite3_limitPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int, int)>();

  int sqlite3_prepare(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSql,
    int nByte,
    ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzTail,
  ) {
    return _sqlite3_prepare(
      db,
      zSql,
      nByte,
      ppStmt,
      pzTail,
    );
  }

  late final _sqlite3_preparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_prepare');
  late final _sqlite3_prepare = _sqlite3_preparePtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int sqlite3_prepare_v2(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSql,
    int nByte,
    ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzTail,
  ) {
    return _sqlite3_prepare_v2(
      db,
      zSql,
      nByte,
      ppStmt,
      pzTail,
    );
  }

  late final _sqlite3_prepare_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_prepare_v2');
  late final _sqlite3_prepare_v2 = _sqlite3_prepare_v2Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int sqlite3_prepare_v3(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSql,
    int nByte,
    int prepFlags,
    ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzTail,
  ) {
    return _sqlite3_prepare_v3(
      db,
      zSql,
      nByte,
      prepFlags,
      ppStmt,
      pzTail,
    );
  }

  late final _sqlite3_prepare_v3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_prepare_v3');
  late final _sqlite3_prepare_v3 = _sqlite3_prepare_v3Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int sqlite3_prepare16(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Void> zSql,
    int nByte,
    ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pzTail,
  ) {
    return _sqlite3_prepare16(
      db,
      zSql,
      nByte,
      ppStmt,
      pzTail,
    );
  }

  late final _sqlite3_prepare16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('sqlite3_prepare16');
  late final _sqlite3_prepare16 = _sqlite3_prepare16Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int sqlite3_prepare16_v2(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Void> zSql,
    int nByte,
    ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pzTail,
  ) {
    return _sqlite3_prepare16_v2(
      db,
      zSql,
      nByte,
      ppStmt,
      pzTail,
    );
  }

  late final _sqlite3_prepare16_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('sqlite3_prepare16_v2');
  late final _sqlite3_prepare16_v2 = _sqlite3_prepare16_v2Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int sqlite3_prepare16_v3(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Void> zSql,
    int nByte,
    int prepFlags,
    ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pzTail,
  ) {
    return _sqlite3_prepare16_v3(
      db,
      zSql,
      nByte,
      prepFlags,
      ppStmt,
      pzTail,
    );
  }

  late final _sqlite3_prepare16_v3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('sqlite3_prepare16_v3');
  late final _sqlite3_prepare16_v3 = _sqlite3_prepare16_v3Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_stmt>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Char> sqlite3_sql(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_sql(
      pStmt,
    );
  }

  late final _sqlite3_sqlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3_stmt>)>>('sqlite3_sql');
  late final _sqlite3_sql = _sqlite3_sqlPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>)>();

  ffi.Pointer<ffi.Char> sqlite3_expanded_sql(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_expanded_sql(
      pStmt,
    );
  }

  late final _sqlite3_expanded_sqlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3_stmt>)>>('sqlite3_expanded_sql');
  late final _sqlite3_expanded_sql = _sqlite3_expanded_sqlPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_stmt_readonly(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_stmt_readonly(
      pStmt,
    );
  }

  late final _sqlite3_stmt_readonlyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_stmt_readonly');
  late final _sqlite3_stmt_readonly = _sqlite3_stmt_readonlyPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_stmt_isexplain(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_stmt_isexplain(
      pStmt,
    );
  }

  late final _sqlite3_stmt_isexplainPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_stmt_isexplain');
  late final _sqlite3_stmt_isexplain = _sqlite3_stmt_isexplainPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_stmt_explain(
    ffi.Pointer<sqlite3_stmt> pStmt,
    int eMode,
  ) {
    return _sqlite3_stmt_explain(
      pStmt,
      eMode,
    );
  }

  late final _sqlite3_stmt_explainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_stmt_explain');
  late final _sqlite3_stmt_explain = _sqlite3_stmt_explainPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_stmt_busy(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_stmt_busy(
      arg0,
    );
  }

  late final _sqlite3_stmt_busyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_stmt_busy');
  late final _sqlite3_stmt_busy = _sqlite3_stmt_busyPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_bind_blob(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int n,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _sqlite3_bind_blob(
      arg0,
      arg1,
      arg2,
      n,
      arg4,
    );
  }

  late final _sqlite3_bind_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_bind_blob');
  late final _sqlite3_bind_blob = _sqlite3_bind_blobPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_bind_blob64(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _sqlite3_bind_blob64(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _sqlite3_bind_blob64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              sqlite3_uint64,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_bind_blob64');
  late final _sqlite3_bind_blob64 = _sqlite3_bind_blob64Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_bind_double(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    double arg2,
  ) {
    return _sqlite3_bind_double(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_bind_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              ffi.Double)>>('sqlite3_bind_double');
  late final _sqlite3_bind_double = _sqlite3_bind_doublePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int, double)>();

  int sqlite3_bind_int(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    int arg2,
  ) {
    return _sqlite3_bind_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_bind_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              ffi.Int)>>('sqlite3_bind_int');
  late final _sqlite3_bind_int = _sqlite3_bind_intPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int, int)>();

  int sqlite3_bind_int64(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    int arg2,
  ) {
    return _sqlite3_bind_int64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_bind_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              sqlite3_int64)>>('sqlite3_bind_int64');
  late final _sqlite3_bind_int64 = _sqlite3_bind_int64Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int, int)>();

  int sqlite3_bind_null(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_bind_null(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_bind_nullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_bind_null');
  late final _sqlite3_bind_null = _sqlite3_bind_nullPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_bind_text(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _sqlite3_bind_text(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _sqlite3_bind_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_bind_text');
  late final _sqlite3_bind_text = _sqlite3_bind_textPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_bind_text16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _sqlite3_bind_text16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _sqlite3_bind_text16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_bind_text16');
  late final _sqlite3_bind_text16 = _sqlite3_bind_text16Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_bind_text64(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg4,
    int encoding,
  ) {
    return _sqlite3_bind_text64(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      encoding,
    );
  }

  late final _sqlite3_bind_text64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              sqlite3_uint64,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.UnsignedChar)>>('sqlite3_bind_text64');
  late final _sqlite3_bind_text64 = _sqlite3_bind_text64Ptr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          int)>();

  int sqlite3_bind_value(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<sqlite3_value> arg2,
  ) {
    return _sqlite3_bind_value(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_bind_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              ffi.Pointer<sqlite3_value>)>>('sqlite3_bind_value');
  late final _sqlite3_bind_value = _sqlite3_bind_valuePtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>, int, ffi.Pointer<sqlite3_value>)>();

  int sqlite3_bind_pointer(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _sqlite3_bind_pointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _sqlite3_bind_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_bind_pointer');
  late final _sqlite3_bind_pointer = _sqlite3_bind_pointerPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_bind_zeroblob(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    int n,
  ) {
    return _sqlite3_bind_zeroblob(
      arg0,
      arg1,
      n,
    );
  }

  late final _sqlite3_bind_zeroblobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              ffi.Int)>>('sqlite3_bind_zeroblob');
  late final _sqlite3_bind_zeroblob = _sqlite3_bind_zeroblobPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int, int)>();

  int sqlite3_bind_zeroblob64(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
    int arg2,
  ) {
    return _sqlite3_bind_zeroblob64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_bind_zeroblob64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              sqlite3_uint64)>>('sqlite3_bind_zeroblob64');
  late final _sqlite3_bind_zeroblob64 = _sqlite3_bind_zeroblob64Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int, int)>();

  int sqlite3_bind_parameter_count(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_bind_parameter_count(
      arg0,
    );
  }

  late final _sqlite3_bind_parameter_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_bind_parameter_count');
  late final _sqlite3_bind_parameter_count = _sqlite3_bind_parameter_countPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  ffi.Pointer<ffi.Char> sqlite3_bind_parameter_name(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_bind_parameter_name(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_bind_parameter_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_bind_parameter_name');
  late final _sqlite3_bind_parameter_name =
      _sqlite3_bind_parameter_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_bind_parameter_index(
    ffi.Pointer<sqlite3_stmt> arg0,
    ffi.Pointer<ffi.Char> zName,
  ) {
    return _sqlite3_bind_parameter_index(
      arg0,
      zName,
    );
  }

  late final _sqlite3_bind_parameter_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_bind_parameter_index');
  late final _sqlite3_bind_parameter_index =
      _sqlite3_bind_parameter_indexPtr.asFunction<
          int Function(ffi.Pointer<sqlite3_stmt>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_clear_bindings(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_clear_bindings(
      arg0,
    );
  }

  late final _sqlite3_clear_bindingsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_clear_bindings');
  late final _sqlite3_clear_bindings = _sqlite3_clear_bindingsPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_column_count(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_column_count(
      pStmt,
    );
  }

  late final _sqlite3_column_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_column_count');
  late final _sqlite3_column_count = _sqlite3_column_countPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  ffi.Pointer<ffi.Char> sqlite3_column_name(
    ffi.Pointer<sqlite3_stmt> arg0,
    int N,
  ) {
    return _sqlite3_column_name(
      arg0,
      N,
    );
  }

  late final _sqlite3_column_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_name');
  late final _sqlite3_column_name = _sqlite3_column_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_column_name16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int N,
  ) {
    return _sqlite3_column_name16(
      arg0,
      N,
    );
  }

  late final _sqlite3_column_name16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_name16');
  late final _sqlite3_column_name16 = _sqlite3_column_name16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Char> sqlite3_column_database_name(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_database_name(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_database_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_database_name');
  late final _sqlite3_column_database_name =
      _sqlite3_column_database_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_column_database_name16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_database_name16(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_database_name16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_database_name16');
  late final _sqlite3_column_database_name16 =
      _sqlite3_column_database_name16Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Char> sqlite3_column_table_name(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_table_name(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_table_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_table_name');
  late final _sqlite3_column_table_name =
      _sqlite3_column_table_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_column_table_name16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_table_name16(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_table_name16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_table_name16');
  late final _sqlite3_column_table_name16 =
      _sqlite3_column_table_name16Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Char> sqlite3_column_origin_name(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_origin_name(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_origin_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_origin_name');
  late final _sqlite3_column_origin_name =
      _sqlite3_column_origin_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_column_origin_name16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_origin_name16(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_origin_name16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_origin_name16');
  late final _sqlite3_column_origin_name16 =
      _sqlite3_column_origin_name16Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Char> sqlite3_column_decltype(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_decltype(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_decltypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_decltype');
  late final _sqlite3_column_decltype = _sqlite3_column_decltypePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_column_decltype16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int arg1,
  ) {
    return _sqlite3_column_decltype16(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_column_decltype16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Int)>>('sqlite3_column_decltype16');
  late final _sqlite3_column_decltype16 =
      _sqlite3_column_decltype16Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_step(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_step(
      arg0,
    );
  }

  late final _sqlite3_stepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_step');
  late final _sqlite3_step =
      _sqlite3_stepPtr.asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_data_count(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_data_count(
      pStmt,
    );
  }

  late final _sqlite3_data_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_data_count');
  late final _sqlite3_data_count = _sqlite3_data_countPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  ffi.Pointer<ffi.Void> sqlite3_column_blob(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_blob(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_blob');
  late final _sqlite3_column_blob = _sqlite3_column_blobPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  double sqlite3_column_double(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_double(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_double');
  late final _sqlite3_column_double = _sqlite3_column_doublePtr
      .asFunction<double Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_column_int(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_int(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_int');
  late final _sqlite3_column_int = _sqlite3_column_intPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_column_int64(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_int64(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_int64Ptr = _lookup<
      ffi.NativeFunction<
          sqlite3_int64 Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_int64');
  late final _sqlite3_column_int64 = _sqlite3_column_int64Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.UnsignedChar> sqlite3_column_text(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_text(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_text');
  late final _sqlite3_column_text = _sqlite3_column_textPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_column_text16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_text16(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_text16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_text16');
  late final _sqlite3_column_text16 = _sqlite3_column_text16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  ffi.Pointer<sqlite3_value> sqlite3_column_value(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_value(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_value> Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_value');
  late final _sqlite3_column_value = _sqlite3_column_valuePtr.asFunction<
      ffi.Pointer<sqlite3_value> Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_column_bytes(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_bytes(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_bytes');
  late final _sqlite3_column_bytes = _sqlite3_column_bytesPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_column_bytes16(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_bytes16(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_bytes16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_bytes16');
  late final _sqlite3_column_bytes16 = _sqlite3_column_bytes16Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_column_type(
    ffi.Pointer<sqlite3_stmt> arg0,
    int iCol,
  ) {
    return _sqlite3_column_type(
      arg0,
      iCol,
    );
  }

  late final _sqlite3_column_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_stmt>, ffi.Int)>>('sqlite3_column_type');
  late final _sqlite3_column_type = _sqlite3_column_typePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int)>();

  int sqlite3_finalize(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_finalize(
      pStmt,
    );
  }

  late final _sqlite3_finalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_finalize');
  late final _sqlite3_finalize = _sqlite3_finalizePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_reset(
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_reset(
      pStmt,
    );
  }

  late final _sqlite3_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_reset');
  late final _sqlite3_reset =
      _sqlite3_resetPtr.asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_create_function(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zFunctionName,
    int nArg,
    int eTextRep,
    ffi.Pointer<ffi.Void> pApp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xFunc,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xStep,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
        xFinal,
  ) {
    return _sqlite3_create_function(
      db,
      zFunctionName,
      nArg,
      eTextRep,
      pApp,
      xFunc,
      xStep,
      xFinal,
    );
  }

  late final _sqlite3_create_functionPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<sqlite3>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Int,
                      ffi.Int,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>)>>)>>(
          'sqlite3_create_function');
  late final _sqlite3_create_function = _sqlite3_create_functionPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                      ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                      ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>)>>)>();

  int sqlite3_create_function16(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Void> zFunctionName,
    int nArg,
    int eTextRep,
    ffi.Pointer<ffi.Void> pApp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xFunc,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xStep,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
        xFinal,
  ) {
    return _sqlite3_create_function16(
      db,
      zFunctionName,
      nArg,
      eTextRep,
      pApp,
      xFunc,
      xStep,
      xFinal,
    );
  }

  late final _sqlite3_create_function16Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<sqlite3>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int,
                      ffi.Int,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>)>>)>>(
          'sqlite3_create_function16');
  late final _sqlite3_create_function16 =
      _sqlite3_create_function16Ptr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>)>>)>();

  int sqlite3_create_function_v2(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zFunctionName,
    int nArg,
    int eTextRep,
    ffi.Pointer<ffi.Void> pApp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xFunc,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xStep,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
        xFinal,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        xDestroy,
  ) {
    return _sqlite3_create_function_v2(
      db,
      zFunctionName,
      nArg,
      eTextRep,
      pApp,
      xFunc,
      xStep,
      xFinal,
      xDestroy,
    );
  }

  late final _sqlite3_create_function_v2Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<sqlite3>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Int,
                      ffi.Int,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<sqlite3_context>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
          'sqlite3_create_function_v2');
  late final _sqlite3_create_function_v2 =
      _sqlite3_create_function_v2Ptr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_create_window_function(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zFunctionName,
    int nArg,
    int eTextRep,
    ffi.Pointer<ffi.Void> pApp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xStep,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
        xFinal,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
        xValue,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                    ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
        xInverse,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        xDestroy,
  ) {
    return _sqlite3_create_window_function(
      db,
      zFunctionName,
      nArg,
      eTextRep,
      pApp,
      xStep,
      xFinal,
      xValue,
      xInverse,
      xDestroy,
    );
  }

  late final _sqlite3_create_window_functionPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<sqlite3>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Int,
                      ffi.Int,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<sqlite3_context>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<sqlite3_context>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
          'sqlite3_create_window_function');
  late final _sqlite3_create_window_function =
      _sqlite3_create_window_functionPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_aggregate_count(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_aggregate_count(
      arg0,
    );
  }

  late final _sqlite3_aggregate_countPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_context>)>>(
      'sqlite3_aggregate_count');
  late final _sqlite3_aggregate_count = _sqlite3_aggregate_countPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_context>)>();

  int sqlite3_expired(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_expired(
      arg0,
    );
  }

  late final _sqlite3_expiredPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_expired');
  late final _sqlite3_expired =
      _sqlite3_expiredPtr.asFunction<int Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_transfer_bindings(
    ffi.Pointer<sqlite3_stmt> arg0,
    ffi.Pointer<sqlite3_stmt> arg1,
  ) {
    return _sqlite3_transfer_bindings(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_transfer_bindingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>,
              ffi.Pointer<sqlite3_stmt>)>>('sqlite3_transfer_bindings');
  late final _sqlite3_transfer_bindings =
      _sqlite3_transfer_bindingsPtr.asFunction<
          int Function(ffi.Pointer<sqlite3_stmt>, ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_global_recover() {
    return _sqlite3_global_recover();
  }

  late final _sqlite3_global_recoverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_global_recover');
  late final _sqlite3_global_recover =
      _sqlite3_global_recoverPtr.asFunction<int Function()>();

  void sqlite3_thread_cleanup() {
    return _sqlite3_thread_cleanup();
  }

  late final _sqlite3_thread_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'sqlite3_thread_cleanup');
  late final _sqlite3_thread_cleanup =
      _sqlite3_thread_cleanupPtr.asFunction<void Function()>();

  int sqlite3_memory_alarm(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, sqlite3_int64, ffi.Int)>>
        arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _sqlite3_memory_alarm(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_memory_alarmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, sqlite3_int64, ffi.Int)>>,
              ffi.Pointer<ffi.Void>,
              sqlite3_int64)>>('sqlite3_memory_alarm');
  late final _sqlite3_memory_alarm = _sqlite3_memory_alarmPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, sqlite3_int64, ffi.Int)>>,
          ffi.Pointer<ffi.Void>,
          int)>();

  ffi.Pointer<ffi.Void> sqlite3_value_blob(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_blob(
      arg0,
    );
  }

  late final _sqlite3_value_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_blob');
  late final _sqlite3_value_blob = _sqlite3_value_blobPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_value>)>();

  double sqlite3_value_double(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_double(
      arg0,
    );
  }

  late final _sqlite3_value_doublePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<sqlite3_value>)>>(
      'sqlite3_value_double');
  late final _sqlite3_value_double = _sqlite3_value_doublePtr
      .asFunction<double Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_int(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_int(
      arg0,
    );
  }

  late final _sqlite3_value_intPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_int');
  late final _sqlite3_value_int = _sqlite3_value_intPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_int64(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_int64(
      arg0,
    );
  }

  late final _sqlite3_value_int64Ptr = _lookup<
          ffi
          .NativeFunction<sqlite3_int64 Function(ffi.Pointer<sqlite3_value>)>>(
      'sqlite3_value_int64');
  late final _sqlite3_value_int64 = _sqlite3_value_int64Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  ffi.Pointer<ffi.Void> sqlite3_value_pointer(
    ffi.Pointer<sqlite3_value> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sqlite3_value_pointer(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_value_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_value>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_value_pointer');
  late final _sqlite3_value_pointer = _sqlite3_value_pointerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3_value>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> sqlite3_value_text(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_text(
      arg0,
    );
  }

  late final _sqlite3_value_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_text');
  late final _sqlite3_value_text = _sqlite3_value_textPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<sqlite3_value>)>();

  ffi.Pointer<ffi.Void> sqlite3_value_text16(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_text16(
      arg0,
    );
  }

  late final _sqlite3_value_text16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_text16');
  late final _sqlite3_value_text16 = _sqlite3_value_text16Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_value>)>();

  ffi.Pointer<ffi.Void> sqlite3_value_text16le(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_text16le(
      arg0,
    );
  }

  late final _sqlite3_value_text16lePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_text16le');
  late final _sqlite3_value_text16le = _sqlite3_value_text16lePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_value>)>();

  ffi.Pointer<ffi.Void> sqlite3_value_text16be(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_text16be(
      arg0,
    );
  }

  late final _sqlite3_value_text16bePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_text16be');
  late final _sqlite3_value_text16be = _sqlite3_value_text16bePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_bytes(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_bytes(
      arg0,
    );
  }

  late final _sqlite3_value_bytesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_bytes');
  late final _sqlite3_value_bytes = _sqlite3_value_bytesPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_bytes16(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_bytes16(
      arg0,
    );
  }

  late final _sqlite3_value_bytes16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_bytes16');
  late final _sqlite3_value_bytes16 = _sqlite3_value_bytes16Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_type(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_type(
      arg0,
    );
  }

  late final _sqlite3_value_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_type');
  late final _sqlite3_value_type = _sqlite3_value_typePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_numeric_type(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_numeric_type(
      arg0,
    );
  }

  late final _sqlite3_value_numeric_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_numeric_type');
  late final _sqlite3_value_numeric_type = _sqlite3_value_numeric_typePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_nochange(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_nochange(
      arg0,
    );
  }

  late final _sqlite3_value_nochangePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_nochange');
  late final _sqlite3_value_nochange = _sqlite3_value_nochangePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_frombind(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_frombind(
      arg0,
    );
  }

  late final _sqlite3_value_frombindPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_frombind');
  late final _sqlite3_value_frombind = _sqlite3_value_frombindPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_encoding(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_encoding(
      arg0,
    );
  }

  late final _sqlite3_value_encodingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_value>)>>(
          'sqlite3_value_encoding');
  late final _sqlite3_value_encoding = _sqlite3_value_encodingPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  int sqlite3_value_subtype(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_subtype(
      arg0,
    );
  }

  late final _sqlite3_value_subtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_subtype');
  late final _sqlite3_value_subtype = _sqlite3_value_subtypePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_value>)>();

  ffi.Pointer<sqlite3_value> sqlite3_value_dup(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_dup(
      arg0,
    );
  }

  late final _sqlite3_value_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_value> Function(
              ffi.Pointer<sqlite3_value>)>>('sqlite3_value_dup');
  late final _sqlite3_value_dup = _sqlite3_value_dupPtr.asFunction<
      ffi.Pointer<sqlite3_value> Function(ffi.Pointer<sqlite3_value>)>();

  void sqlite3_value_free(
    ffi.Pointer<sqlite3_value> arg0,
  ) {
    return _sqlite3_value_free(
      arg0,
    );
  }

  late final _sqlite3_value_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_value>)>>(
      'sqlite3_value_free');
  late final _sqlite3_value_free = _sqlite3_value_freePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_value>)>();

  ffi.Pointer<ffi.Void> sqlite3_aggregate_context(
    ffi.Pointer<sqlite3_context> arg0,
    int nBytes,
  ) {
    return _sqlite3_aggregate_context(
      arg0,
      nBytes,
    );
  }

  late final _sqlite3_aggregate_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_context>,
              ffi.Int)>>('sqlite3_aggregate_context');
  late final _sqlite3_aggregate_context =
      _sqlite3_aggregate_contextPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_context>, int)>();

  ffi.Pointer<ffi.Void> sqlite3_user_data(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_user_data(
      arg0,
    );
  }

  late final _sqlite3_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_context>)>>('sqlite3_user_data');
  late final _sqlite3_user_data = _sqlite3_user_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_context>)>();

  ffi.Pointer<sqlite3> sqlite3_context_db_handle(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_context_db_handle(
      arg0,
    );
  }

  late final _sqlite3_context_db_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3> Function(
              ffi.Pointer<sqlite3_context>)>>('sqlite3_context_db_handle');
  late final _sqlite3_context_db_handle =
      _sqlite3_context_db_handlePtr.asFunction<
          ffi.Pointer<sqlite3> Function(ffi.Pointer<sqlite3_context>)>();

  ffi.Pointer<ffi.Void> sqlite3_get_auxdata(
    ffi.Pointer<sqlite3_context> arg0,
    int N,
  ) {
    return _sqlite3_get_auxdata(
      arg0,
      N,
    );
  }

  late final _sqlite3_get_auxdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_context>, ffi.Int)>>('sqlite3_get_auxdata');
  late final _sqlite3_get_auxdata = _sqlite3_get_auxdataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3_context>, int)>();

  void sqlite3_set_auxdata(
    ffi.Pointer<sqlite3_context> arg0,
    int N,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_set_auxdata(
      arg0,
      N,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_set_auxdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_set_auxdata');
  late final _sqlite3_set_auxdata = _sqlite3_set_auxdataPtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> sqlite3_get_clientdata(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sqlite3_get_clientdata(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_get_clientdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_get_clientdata');
  late final _sqlite3_get_clientdata = _sqlite3_get_clientdataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_set_clientdata(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_set_clientdata(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_set_clientdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_set_clientdata');
  late final _sqlite3_set_clientdata = _sqlite3_set_clientdataPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_blob(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_blob(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_result_blob');
  late final _sqlite3_result_blob = _sqlite3_result_blobPtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_blob64(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_blob64(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_blob64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Pointer<ffi.Void>,
              sqlite3_uint64,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_result_blob64');
  late final _sqlite3_result_blob64 = _sqlite3_result_blob64Ptr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_double(
    ffi.Pointer<sqlite3_context> arg0,
    double arg1,
  ) {
    return _sqlite3_result_double(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_result_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>,
              ffi.Double)>>('sqlite3_result_double');
  late final _sqlite3_result_double = _sqlite3_result_doublePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>, double)>();

  void sqlite3_result_error(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _sqlite3_result_error(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_result_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('sqlite3_result_error');
  late final _sqlite3_result_error = _sqlite3_result_errorPtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>, ffi.Pointer<ffi.Char>, int)>();

  void sqlite3_result_error16(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _sqlite3_result_error16(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_result_error16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('sqlite3_result_error16');
  late final _sqlite3_result_error16 = _sqlite3_result_error16Ptr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>, ffi.Pointer<ffi.Void>, int)>();

  void sqlite3_result_error_toobig(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_result_error_toobig(
      arg0,
    );
  }

  late final _sqlite3_result_error_toobigPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>(
      'sqlite3_result_error_toobig');
  late final _sqlite3_result_error_toobig = _sqlite3_result_error_toobigPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>)>();

  void sqlite3_result_error_nomem(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_result_error_nomem(
      arg0,
    );
  }

  late final _sqlite3_result_error_nomemPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>(
      'sqlite3_result_error_nomem');
  late final _sqlite3_result_error_nomem = _sqlite3_result_error_nomemPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>)>();

  void sqlite3_result_error_code(
    ffi.Pointer<sqlite3_context> arg0,
    int arg1,
  ) {
    return _sqlite3_result_error_code(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_result_error_codePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>,
              ffi.Int)>>('sqlite3_result_error_code');
  late final _sqlite3_result_error_code = _sqlite3_result_error_codePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>, int)>();

  void sqlite3_result_int(
    ffi.Pointer<sqlite3_context> arg0,
    int arg1,
  ) {
    return _sqlite3_result_int(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_result_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>, ffi.Int)>>('sqlite3_result_int');
  late final _sqlite3_result_int = _sqlite3_result_intPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>, int)>();

  void sqlite3_result_int64(
    ffi.Pointer<sqlite3_context> arg0,
    int arg1,
  ) {
    return _sqlite3_result_int64(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_result_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>,
              sqlite3_int64)>>('sqlite3_result_int64');
  late final _sqlite3_result_int64 = _sqlite3_result_int64Ptr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>, int)>();

  void sqlite3_result_null(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_result_null(
      arg0,
    );
  }

  late final _sqlite3_result_nullPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>(
      'sqlite3_result_null');
  late final _sqlite3_result_null = _sqlite3_result_nullPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>)>();

  void sqlite3_result_text(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_text(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_result_text');
  late final _sqlite3_result_text = _sqlite3_result_textPtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_text64(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
    int encoding,
  ) {
    return _sqlite3_result_text64(
      arg0,
      arg1,
      arg2,
      arg3,
      encoding,
    );
  }

  late final _sqlite3_result_text64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Pointer<ffi.Char>,
              sqlite3_uint64,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.UnsignedChar)>>('sqlite3_result_text64');
  late final _sqlite3_result_text64 = _sqlite3_result_text64Ptr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          int)>();

  void sqlite3_result_text16(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_text16(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_text16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_result_text16');
  late final _sqlite3_result_text16 = _sqlite3_result_text16Ptr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_text16le(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_text16le(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_text16lePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<sqlite3_context>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_result_text16le');
  late final _sqlite3_result_text16le = _sqlite3_result_text16lePtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_text16be(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_text16be(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_text16bePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<sqlite3_context>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_result_text16be');
  late final _sqlite3_result_text16be = _sqlite3_result_text16bePtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_value(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<sqlite3_value> arg1,
  ) {
    return _sqlite3_result_value(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_result_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>,
              ffi.Pointer<sqlite3_value>)>>('sqlite3_result_value');
  late final _sqlite3_result_value = _sqlite3_result_valuePtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>, ffi.Pointer<sqlite3_value>)>();

  void sqlite3_result_pointer(
    ffi.Pointer<sqlite3_context> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_result_pointer(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_result_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_context>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('sqlite3_result_pointer');
  late final _sqlite3_result_pointer = _sqlite3_result_pointerPtr.asFunction<
      void Function(
          ffi.Pointer<sqlite3_context>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void sqlite3_result_zeroblob(
    ffi.Pointer<sqlite3_context> arg0,
    int n,
  ) {
    return _sqlite3_result_zeroblob(
      arg0,
      n,
    );
  }

  late final _sqlite3_result_zeroblobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>,
              ffi.Int)>>('sqlite3_result_zeroblob');
  late final _sqlite3_result_zeroblob = _sqlite3_result_zeroblobPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>, int)>();

  int sqlite3_result_zeroblob64(
    ffi.Pointer<sqlite3_context> arg0,
    int n,
  ) {
    return _sqlite3_result_zeroblob64(
      arg0,
      n,
    );
  }

  late final _sqlite3_result_zeroblob64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_context>,
              sqlite3_uint64)>>('sqlite3_result_zeroblob64');
  late final _sqlite3_result_zeroblob64 = _sqlite3_result_zeroblob64Ptr
      .asFunction<int Function(ffi.Pointer<sqlite3_context>, int)>();

  void sqlite3_result_subtype(
    ffi.Pointer<sqlite3_context> arg0,
    int arg1,
  ) {
    return _sqlite3_result_subtype(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_result_subtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_context>,
              ffi.UnsignedInt)>>('sqlite3_result_subtype');
  late final _sqlite3_result_subtype = _sqlite3_result_subtypePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_context>, int)>();

  int sqlite3_create_collation(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zName,
    int eTextRep,
    ffi.Pointer<ffi.Void> pArg,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                    ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        xCompare,
  ) {
    return _sqlite3_create_collation(
      arg0,
      zName,
      eTextRep,
      pArg,
      xCompare,
    );
  }

  late final _sqlite3_create_collationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_create_collation');
  late final _sqlite3_create_collation =
      _sqlite3_create_collationPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_create_collation_v2(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zName,
    int eTextRep,
    ffi.Pointer<ffi.Void> pArg,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                    ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        xCompare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        xDestroy,
  ) {
    return _sqlite3_create_collation_v2(
      arg0,
      zName,
      eTextRep,
      pArg,
      xCompare,
      xDestroy,
    );
  }

  late final _sqlite3_create_collation_v2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_create_collation_v2');
  late final _sqlite3_create_collation_v2 =
      _sqlite3_create_collation_v2Ptr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_create_collation16(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Void> zName,
    int eTextRep,
    ffi.Pointer<ffi.Void> pArg,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                    ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        xCompare,
  ) {
    return _sqlite3_create_collation16(
      arg0,
      zName,
      eTextRep,
      pArg,
      xCompare,
    );
  }

  late final _sqlite3_create_collation16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_create_collation16');
  late final _sqlite3_create_collation16 =
      _sqlite3_create_collation16Ptr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_collation_needed(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<sqlite3>,
                    ffi.Int, ffi.Pointer<ffi.Char>)>>
        arg2,
  ) {
    return _sqlite3_collation_needed(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_collation_neededPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<sqlite3>,
                              ffi.Int,
                              ffi.Pointer<ffi.Char>)>>)>>(
      'sqlite3_collation_needed');
  late final _sqlite3_collation_needed =
      _sqlite3_collation_neededPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<sqlite3>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>)>>)>();

  int sqlite3_collation_needed16(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<sqlite3>,
                    ffi.Int, ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _sqlite3_collation_needed16(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_collation_needed16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<sqlite3>,
                              ffi.Int,
                              ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_collation_needed16');
  late final _sqlite3_collation_needed16 =
      _sqlite3_collation_needed16Ptr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<sqlite3>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_sleep(
    int arg0,
  ) {
    return _sqlite3_sleep(
      arg0,
    );
  }

  late final _sqlite3_sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sqlite3_sleep');
  late final _sqlite3_sleep = _sqlite3_sleepPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _sqlite3_temp_directory =
      _lookup<ffi.Pointer<ffi.Char>>('sqlite3_temp_directory');

  ffi.Pointer<ffi.Char> get sqlite3_temp_directory =>
      _sqlite3_temp_directory.value;

  set sqlite3_temp_directory(ffi.Pointer<ffi.Char> value) =>
      _sqlite3_temp_directory.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _sqlite3_data_directory =
      _lookup<ffi.Pointer<ffi.Char>>('sqlite3_data_directory');

  ffi.Pointer<ffi.Char> get sqlite3_data_directory =>
      _sqlite3_data_directory.value;

  set sqlite3_data_directory(ffi.Pointer<ffi.Char> value) =>
      _sqlite3_data_directory.value = value;

  int sqlite3_win32_set_directory(
    int type,
    ffi.Pointer<ffi.Void> zValue,
  ) {
    return _sqlite3_win32_set_directory(
      type,
      zValue,
    );
  }

  late final _sqlite3_win32_set_directoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>)>>('sqlite3_win32_set_directory');
  late final _sqlite3_win32_set_directory = _sqlite3_win32_set_directoryPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int sqlite3_win32_set_directory8(
    int type,
    ffi.Pointer<ffi.Char> zValue,
  ) {
    return _sqlite3_win32_set_directory8(
      type,
      zValue,
    );
  }

  late final _sqlite3_win32_set_directory8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong,
              ffi.Pointer<ffi.Char>)>>('sqlite3_win32_set_directory8');
  late final _sqlite3_win32_set_directory8 = _sqlite3_win32_set_directory8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int sqlite3_win32_set_directory16(
    int type,
    ffi.Pointer<ffi.Void> zValue,
  ) {
    return _sqlite3_win32_set_directory16(
      type,
      zValue,
    );
  }

  late final _sqlite3_win32_set_directory16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>)>>('sqlite3_win32_set_directory16');
  late final _sqlite3_win32_set_directory16 = _sqlite3_win32_set_directory16Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int sqlite3_get_autocommit(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_get_autocommit(
      arg0,
    );
  }

  late final _sqlite3_get_autocommitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_get_autocommit');
  late final _sqlite3_get_autocommit = _sqlite3_get_autocommitPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  ffi.Pointer<sqlite3> sqlite3_db_handle(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_db_handle(
      arg0,
    );
  }

  late final _sqlite3_db_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3> Function(
              ffi.Pointer<sqlite3_stmt>)>>('sqlite3_db_handle');
  late final _sqlite3_db_handle = _sqlite3_db_handlePtr
      .asFunction<ffi.Pointer<sqlite3> Function(ffi.Pointer<sqlite3_stmt>)>();

  ffi.Pointer<ffi.Char> sqlite3_db_name(
    ffi.Pointer<sqlite3> db,
    int N,
  ) {
    return _sqlite3_db_name(
      db,
      N,
    );
  }

  late final _sqlite3_db_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3>, ffi.Int)>>('sqlite3_db_name');
  late final _sqlite3_db_name = _sqlite3_db_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3>, int)>();

  sqlite3_filename sqlite3_db_filename(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zDbName,
  ) {
    return _sqlite3_db_filename(
      db,
      zDbName,
    );
  }

  late final _sqlite3_db_filenamePtr = _lookup<
      ffi.NativeFunction<
          sqlite3_filename Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_db_filename');
  late final _sqlite3_db_filename = _sqlite3_db_filenamePtr.asFunction<
      sqlite3_filename Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_db_readonly(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zDbName,
  ) {
    return _sqlite3_db_readonly(
      db,
      zDbName,
    );
  }

  late final _sqlite3_db_readonlyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_db_readonly');
  late final _sqlite3_db_readonly = _sqlite3_db_readonlyPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_txn_state(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zSchema,
  ) {
    return _sqlite3_txn_state(
      arg0,
      zSchema,
    );
  }

  late final _sqlite3_txn_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_txn_state');
  late final _sqlite3_txn_state = _sqlite3_txn_statePtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<sqlite3_stmt> sqlite3_next_stmt(
    ffi.Pointer<sqlite3> pDb,
    ffi.Pointer<sqlite3_stmt> pStmt,
  ) {
    return _sqlite3_next_stmt(
      pDb,
      pStmt,
    );
  }

  late final _sqlite3_next_stmtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_stmt> Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<sqlite3_stmt>)>>('sqlite3_next_stmt');
  late final _sqlite3_next_stmt = _sqlite3_next_stmtPtr.asFunction<
      ffi.Pointer<sqlite3_stmt> Function(
          ffi.Pointer<sqlite3>, ffi.Pointer<sqlite3_stmt>)>();

  ffi.Pointer<ffi.Void> sqlite3_commit_hook(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_commit_hook(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_commit_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_commit_hook');
  late final _sqlite3_commit_hook = _sqlite3_commit_hookPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sqlite3_rollback_hook(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_rollback_hook(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_rollback_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_rollback_hook');
  late final _sqlite3_rollback_hook = _sqlite3_rollback_hookPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_autovacuum_pages(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedInt Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Char>,
                    ffi.UnsignedInt,
                    ffi.UnsignedInt,
                    ffi.UnsignedInt)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _sqlite3_autovacuum_pages(
      db,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sqlite3_autovacuum_pagesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedInt Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>,
                              ffi.UnsignedInt,
                              ffi.UnsignedInt,
                              ffi.UnsignedInt)>>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_autovacuum_pages');
  late final _sqlite3_autovacuum_pages =
      _sqlite3_autovacuum_pagesPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedInt Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.UnsignedInt,
                          ffi.UnsignedInt,
                          ffi.UnsignedInt)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> sqlite3_update_hook(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Int,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>,
                    sqlite3_int64)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_update_hook(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_update_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          sqlite3_int64)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_update_hook');
  late final _sqlite3_update_hook = _sqlite3_update_hookPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Int,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>,
                      sqlite3_int64)>>,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_enable_shared_cache(
    int arg0,
  ) {
    return _sqlite3_enable_shared_cache(
      arg0,
    );
  }

  late final _sqlite3_enable_shared_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sqlite3_enable_shared_cache');
  late final _sqlite3_enable_shared_cache =
      _sqlite3_enable_shared_cachePtr.asFunction<int Function(int)>();

  int sqlite3_release_memory(
    int arg0,
  ) {
    return _sqlite3_release_memory(
      arg0,
    );
  }

  late final _sqlite3_release_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sqlite3_release_memory');
  late final _sqlite3_release_memory =
      _sqlite3_release_memoryPtr.asFunction<int Function(int)>();

  int sqlite3_db_release_memory(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_db_release_memory(
      arg0,
    );
  }

  late final _sqlite3_db_release_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_db_release_memory');
  late final _sqlite3_db_release_memory = _sqlite3_db_release_memoryPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_soft_heap_limit64(
    int N,
  ) {
    return _sqlite3_soft_heap_limit64(
      N,
    );
  }

  late final _sqlite3_soft_heap_limit64Ptr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function(sqlite3_int64)>>(
          'sqlite3_soft_heap_limit64');
  late final _sqlite3_soft_heap_limit64 =
      _sqlite3_soft_heap_limit64Ptr.asFunction<int Function(int)>();

  int sqlite3_hard_heap_limit64(
    int N,
  ) {
    return _sqlite3_hard_heap_limit64(
      N,
    );
  }

  late final _sqlite3_hard_heap_limit64Ptr =
      _lookup<ffi.NativeFunction<sqlite3_int64 Function(sqlite3_int64)>>(
          'sqlite3_hard_heap_limit64');
  late final _sqlite3_hard_heap_limit64 =
      _sqlite3_hard_heap_limit64Ptr.asFunction<int Function(int)>();

  void sqlite3_soft_heap_limit(
    int N,
  ) {
    return _sqlite3_soft_heap_limit(
      N,
    );
  }

  late final _sqlite3_soft_heap_limitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'sqlite3_soft_heap_limit');
  late final _sqlite3_soft_heap_limit =
      _sqlite3_soft_heap_limitPtr.asFunction<void Function(int)>();

  int sqlite3_table_column_metadata(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zDbName,
    ffi.Pointer<ffi.Char> zTableName,
    ffi.Pointer<ffi.Char> zColumnName,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzDataType,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzCollSeq,
    ffi.Pointer<ffi.Int> pNotNull,
    ffi.Pointer<ffi.Int> pPrimaryKey,
    ffi.Pointer<ffi.Int> pAutoinc,
  ) {
    return _sqlite3_table_column_metadata(
      db,
      zDbName,
      zTableName,
      zColumnName,
      pzDataType,
      pzCollSeq,
      pNotNull,
      pPrimaryKey,
      pAutoinc,
    );
  }

  late final _sqlite3_table_column_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('sqlite3_table_column_metadata');
  late final _sqlite3_table_column_metadata =
      _sqlite3_table_column_metadataPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int sqlite3_load_extension(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zFile,
    ffi.Pointer<ffi.Char> zProc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pzErrMsg,
  ) {
    return _sqlite3_load_extension(
      db,
      zFile,
      zProc,
      pzErrMsg,
    );
  }

  late final _sqlite3_load_extensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_load_extension');
  late final _sqlite3_load_extension = _sqlite3_load_extensionPtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int sqlite3_enable_load_extension(
    ffi.Pointer<sqlite3> db,
    int onoff,
  ) {
    return _sqlite3_enable_load_extension(
      db,
      onoff,
    );
  }

  late final _sqlite3_enable_load_extensionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int)>>(
      'sqlite3_enable_load_extension');
  late final _sqlite3_enable_load_extension = _sqlite3_enable_load_extensionPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_auto_extension(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> xEntryPoint,
  ) {
    return _sqlite3_auto_extension(
      xEntryPoint,
    );
  }

  late final _sqlite3_auto_extensionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'sqlite3_auto_extension');
  late final _sqlite3_auto_extension = _sqlite3_auto_extensionPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int sqlite3_cancel_auto_extension(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> xEntryPoint,
  ) {
    return _sqlite3_cancel_auto_extension(
      xEntryPoint,
    );
  }

  late final _sqlite3_cancel_auto_extensionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'sqlite3_cancel_auto_extension');
  late final _sqlite3_cancel_auto_extension =
      _sqlite3_cancel_auto_extensionPtr.asFunction<
          int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void sqlite3_reset_auto_extension() {
    return _sqlite3_reset_auto_extension();
  }

  late final _sqlite3_reset_auto_extensionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'sqlite3_reset_auto_extension');
  late final _sqlite3_reset_auto_extension =
      _sqlite3_reset_auto_extensionPtr.asFunction<void Function()>();

  int sqlite3_create_module(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zName,
    ffi.Pointer<sqlite3_module> p,
    ffi.Pointer<ffi.Void> pClientData,
  ) {
    return _sqlite3_create_module(
      db,
      zName,
      p,
      pClientData,
    );
  }

  late final _sqlite3_create_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<sqlite3_module>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_create_module');
  late final _sqlite3_create_module = _sqlite3_create_modulePtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<sqlite3_module>, ffi.Pointer<ffi.Void>)>();

  int sqlite3_create_module_v2(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zName,
    ffi.Pointer<sqlite3_module> p,
    ffi.Pointer<ffi.Void> pClientData,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        xDestroy,
  ) {
    return _sqlite3_create_module_v2(
      db,
      zName,
      p,
      pClientData,
      xDestroy,
    );
  }

  late final _sqlite3_create_module_v2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<sqlite3_module>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_create_module_v2');
  late final _sqlite3_create_module_v2 =
      _sqlite3_create_module_v2Ptr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<sqlite3_module>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int sqlite3_drop_modules(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Pointer<ffi.Char>> azKeep,
  ) {
    return _sqlite3_drop_modules(
      db,
      azKeep,
    );
  }

  late final _sqlite3_drop_modulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sqlite3_drop_modules');
  late final _sqlite3_drop_modules = _sqlite3_drop_modulesPtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int sqlite3_declare_vtab(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zSQL,
  ) {
    return _sqlite3_declare_vtab(
      arg0,
      zSQL,
    );
  }

  late final _sqlite3_declare_vtabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_declare_vtab');
  late final _sqlite3_declare_vtab = _sqlite3_declare_vtabPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_overload_function(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zFuncName,
    int nArg,
  ) {
    return _sqlite3_overload_function(
      arg0,
      zFuncName,
      nArg,
    );
  }

  late final _sqlite3_overload_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('sqlite3_overload_function');
  late final _sqlite3_overload_function =
      _sqlite3_overload_functionPtr.asFunction<
          int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>, int)>();

  int sqlite3_blob_open(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zDb,
    ffi.Pointer<ffi.Char> zTable,
    ffi.Pointer<ffi.Char> zColumn,
    int iRow,
    int flags,
    ffi.Pointer<ffi.Pointer<sqlite3_blob>> ppBlob,
  ) {
    return _sqlite3_blob_open(
      arg0,
      zDb,
      zTable,
      zColumn,
      iRow,
      flags,
      ppBlob,
    );
  }

  late final _sqlite3_blob_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              sqlite3_int64,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_blob>>)>>('sqlite3_blob_open');
  late final _sqlite3_blob_open = _sqlite3_blob_openPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<sqlite3_blob>>)>();

  int sqlite3_blob_reopen(
    ffi.Pointer<sqlite3_blob> arg0,
    int arg1,
  ) {
    return _sqlite3_blob_reopen(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_blob_reopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_blob>,
              sqlite3_int64)>>('sqlite3_blob_reopen');
  late final _sqlite3_blob_reopen = _sqlite3_blob_reopenPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_blob>, int)>();

  int sqlite3_blob_close(
    ffi.Pointer<sqlite3_blob> arg0,
  ) {
    return _sqlite3_blob_close(
      arg0,
    );
  }

  late final _sqlite3_blob_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_blob>)>>(
          'sqlite3_blob_close');
  late final _sqlite3_blob_close = _sqlite3_blob_closePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_blob>)>();

  int sqlite3_blob_bytes(
    ffi.Pointer<sqlite3_blob> arg0,
  ) {
    return _sqlite3_blob_bytes(
      arg0,
    );
  }

  late final _sqlite3_blob_bytesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_blob>)>>(
          'sqlite3_blob_bytes');
  late final _sqlite3_blob_bytes = _sqlite3_blob_bytesPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_blob>)>();

  int sqlite3_blob_read(
    ffi.Pointer<sqlite3_blob> arg0,
    ffi.Pointer<ffi.Void> Z,
    int N,
    int iOffset,
  ) {
    return _sqlite3_blob_read(
      arg0,
      Z,
      N,
      iOffset,
    );
  }

  late final _sqlite3_blob_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_blob>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int)>>('sqlite3_blob_read');
  late final _sqlite3_blob_read = _sqlite3_blob_readPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_blob>, ffi.Pointer<ffi.Void>, int, int)>();

  int sqlite3_blob_write(
    ffi.Pointer<sqlite3_blob> arg0,
    ffi.Pointer<ffi.Void> z,
    int n,
    int iOffset,
  ) {
    return _sqlite3_blob_write(
      arg0,
      z,
      n,
      iOffset,
    );
  }

  late final _sqlite3_blob_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_blob>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int)>>('sqlite3_blob_write');
  late final _sqlite3_blob_write = _sqlite3_blob_writePtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_blob>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<sqlite3_vfs> sqlite3_vfs_find(
    ffi.Pointer<ffi.Char> zVfsName,
  ) {
    return _sqlite3_vfs_find(
      zVfsName,
    );
  }

  late final _sqlite3_vfs_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_vfs> Function(
              ffi.Pointer<ffi.Char>)>>('sqlite3_vfs_find');
  late final _sqlite3_vfs_find = _sqlite3_vfs_findPtr
      .asFunction<ffi.Pointer<sqlite3_vfs> Function(ffi.Pointer<ffi.Char>)>();

  int sqlite3_vfs_register(
    ffi.Pointer<sqlite3_vfs> arg0,
    int makeDflt,
  ) {
    return _sqlite3_vfs_register(
      arg0,
      makeDflt,
    );
  }

  late final _sqlite3_vfs_registerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Int)>>(
      'sqlite3_vfs_register');
  late final _sqlite3_vfs_register = _sqlite3_vfs_registerPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_vfs>, int)>();

  int sqlite3_vfs_unregister(
    ffi.Pointer<sqlite3_vfs> arg0,
  ) {
    return _sqlite3_vfs_unregister(
      arg0,
    );
  }

  late final _sqlite3_vfs_unregisterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vfs>)>>(
          'sqlite3_vfs_unregister');
  late final _sqlite3_vfs_unregister = _sqlite3_vfs_unregisterPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_vfs>)>();

  ffi.Pointer<sqlite3_mutex> sqlite3_mutex_alloc(
    int arg0,
  ) {
    return _sqlite3_mutex_alloc(
      arg0,
    );
  }

  late final _sqlite3_mutex_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<sqlite3_mutex> Function(ffi.Int)>>(
          'sqlite3_mutex_alloc');
  late final _sqlite3_mutex_alloc = _sqlite3_mutex_allocPtr
      .asFunction<ffi.Pointer<sqlite3_mutex> Function(int)>();

  void sqlite3_mutex_free(
    ffi.Pointer<sqlite3_mutex> arg0,
  ) {
    return _sqlite3_mutex_free(
      arg0,
    );
  }

  late final _sqlite3_mutex_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_mutex>)>>(
      'sqlite3_mutex_free');
  late final _sqlite3_mutex_free = _sqlite3_mutex_freePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_mutex>)>();

  void sqlite3_mutex_enter(
    ffi.Pointer<sqlite3_mutex> arg0,
  ) {
    return _sqlite3_mutex_enter(
      arg0,
    );
  }

  late final _sqlite3_mutex_enterPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_mutex>)>>(
      'sqlite3_mutex_enter');
  late final _sqlite3_mutex_enter = _sqlite3_mutex_enterPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_mutex>)>();

  int sqlite3_mutex_try(
    ffi.Pointer<sqlite3_mutex> arg0,
  ) {
    return _sqlite3_mutex_try(
      arg0,
    );
  }

  late final _sqlite3_mutex_tryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_mutex>)>>(
          'sqlite3_mutex_try');
  late final _sqlite3_mutex_try = _sqlite3_mutex_tryPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_mutex>)>();

  void sqlite3_mutex_leave(
    ffi.Pointer<sqlite3_mutex> arg0,
  ) {
    return _sqlite3_mutex_leave(
      arg0,
    );
  }

  late final _sqlite3_mutex_leavePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_mutex>)>>(
      'sqlite3_mutex_leave');
  late final _sqlite3_mutex_leave = _sqlite3_mutex_leavePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_mutex>)>();

  int sqlite3_mutex_held(
    ffi.Pointer<sqlite3_mutex> arg0,
  ) {
    return _sqlite3_mutex_held(
      arg0,
    );
  }

  late final _sqlite3_mutex_heldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_mutex>)>>(
          'sqlite3_mutex_held');
  late final _sqlite3_mutex_held = _sqlite3_mutex_heldPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_mutex>)>();

  int sqlite3_mutex_notheld(
    ffi.Pointer<sqlite3_mutex> arg0,
  ) {
    return _sqlite3_mutex_notheld(
      arg0,
    );
  }

  late final _sqlite3_mutex_notheldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_mutex>)>>(
          'sqlite3_mutex_notheld');
  late final _sqlite3_mutex_notheld = _sqlite3_mutex_notheldPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_mutex>)>();

  ffi.Pointer<sqlite3_mutex> sqlite3_db_mutex(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_db_mutex(
      arg0,
    );
  }

  late final _sqlite3_db_mutexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_mutex> Function(
              ffi.Pointer<sqlite3>)>>('sqlite3_db_mutex');
  late final _sqlite3_db_mutex = _sqlite3_db_mutexPtr
      .asFunction<ffi.Pointer<sqlite3_mutex> Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_file_control(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<ffi.Char> zDbName,
    int op,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _sqlite3_file_control(
      arg0,
      zDbName,
      op,
      arg3,
    );
  }

  late final _sqlite3_file_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('sqlite3_file_control');
  late final _sqlite3_file_control = _sqlite3_file_controlPtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_test_control(
    int op,
  ) {
    return _sqlite3_test_control(
      op,
    );
  }

  late final _sqlite3_test_controlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sqlite3_test_control');
  late final _sqlite3_test_control =
      _sqlite3_test_controlPtr.asFunction<int Function(int)>();

  int sqlite3_keyword_count() {
    return _sqlite3_keyword_count();
  }

  late final _sqlite3_keyword_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sqlite3_keyword_count');
  late final _sqlite3_keyword_count =
      _sqlite3_keyword_countPtr.asFunction<int Function()>();

  int sqlite3_keyword_name(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _sqlite3_keyword_name(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_keyword_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('sqlite3_keyword_name');
  late final _sqlite3_keyword_name = _sqlite3_keyword_namePtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  int sqlite3_keyword_check(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sqlite3_keyword_check(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_keyword_checkPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sqlite3_keyword_check');
  late final _sqlite3_keyword_check = _sqlite3_keyword_checkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<sqlite3_str> sqlite3_str_new(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_str_new(
      arg0,
    );
  }

  late final _sqlite3_str_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_str> Function(
              ffi.Pointer<sqlite3>)>>('sqlite3_str_new');
  late final _sqlite3_str_new = _sqlite3_str_newPtr
      .asFunction<ffi.Pointer<sqlite3_str> Function(ffi.Pointer<sqlite3>)>();

  ffi.Pointer<ffi.Char> sqlite3_str_finish(
    ffi.Pointer<sqlite3_str> arg0,
  ) {
    return _sqlite3_str_finish(
      arg0,
    );
  }

  late final _sqlite3_str_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3_str>)>>('sqlite3_str_finish');
  late final _sqlite3_str_finish = _sqlite3_str_finishPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_str>)>();

  void sqlite3_str_appendf(
    ffi.Pointer<sqlite3_str> arg0,
    ffi.Pointer<ffi.Char> zFormat,
  ) {
    return _sqlite3_str_appendf(
      arg0,
      zFormat,
    );
  }

  late final _sqlite3_str_appendfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_str>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_str_appendf');
  late final _sqlite3_str_appendf = _sqlite3_str_appendfPtr.asFunction<
      void Function(ffi.Pointer<sqlite3_str>, ffi.Pointer<ffi.Char>)>();

  void sqlite3_str_vappendf(
    ffi.Pointer<sqlite3_str> arg0,
    ffi.Pointer<ffi.Char> zFormat,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _sqlite3_str_vappendf(
      arg0,
      zFormat,
      arg2,
    );
  }

  late final _sqlite3_str_vappendfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_str>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('sqlite3_str_vappendf');
  late final _sqlite3_str_vappendf = _sqlite3_str_vappendfPtr.asFunction<
      void Function(ffi.Pointer<sqlite3_str>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void sqlite3_str_append(
    ffi.Pointer<sqlite3_str> arg0,
    ffi.Pointer<ffi.Char> zIn,
    int N,
  ) {
    return _sqlite3_str_append(
      arg0,
      zIn,
      N,
    );
  }

  late final _sqlite3_str_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_str>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('sqlite3_str_append');
  late final _sqlite3_str_append = _sqlite3_str_appendPtr.asFunction<
      void Function(ffi.Pointer<sqlite3_str>, ffi.Pointer<ffi.Char>, int)>();

  void sqlite3_str_appendall(
    ffi.Pointer<sqlite3_str> arg0,
    ffi.Pointer<ffi.Char> zIn,
  ) {
    return _sqlite3_str_appendall(
      arg0,
      zIn,
    );
  }

  late final _sqlite3_str_appendallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_str>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_str_appendall');
  late final _sqlite3_str_appendall = _sqlite3_str_appendallPtr.asFunction<
      void Function(ffi.Pointer<sqlite3_str>, ffi.Pointer<ffi.Char>)>();

  void sqlite3_str_appendchar(
    ffi.Pointer<sqlite3_str> arg0,
    int N,
    int C,
  ) {
    return _sqlite3_str_appendchar(
      arg0,
      N,
      C,
    );
  }

  late final _sqlite3_str_appendcharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_str>, ffi.Int,
              ffi.Char)>>('sqlite3_str_appendchar');
  late final _sqlite3_str_appendchar = _sqlite3_str_appendcharPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_str>, int, int)>();

  void sqlite3_str_reset(
    ffi.Pointer<sqlite3_str> arg0,
  ) {
    return _sqlite3_str_reset(
      arg0,
    );
  }

  late final _sqlite3_str_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_str>)>>(
          'sqlite3_str_reset');
  late final _sqlite3_str_reset = _sqlite3_str_resetPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_str>)>();

  int sqlite3_str_errcode(
    ffi.Pointer<sqlite3_str> arg0,
  ) {
    return _sqlite3_str_errcode(
      arg0,
    );
  }

  late final _sqlite3_str_errcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_str>)>>(
          'sqlite3_str_errcode');
  late final _sqlite3_str_errcode = _sqlite3_str_errcodePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_str>)>();

  int sqlite3_str_length(
    ffi.Pointer<sqlite3_str> arg0,
  ) {
    return _sqlite3_str_length(
      arg0,
    );
  }

  late final _sqlite3_str_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_str>)>>(
          'sqlite3_str_length');
  late final _sqlite3_str_length = _sqlite3_str_lengthPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_str>)>();

  ffi.Pointer<ffi.Char> sqlite3_str_value(
    ffi.Pointer<sqlite3_str> arg0,
  ) {
    return _sqlite3_str_value(
      arg0,
    );
  }

  late final _sqlite3_str_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sqlite3_str>)>>('sqlite3_str_value');
  late final _sqlite3_str_value = _sqlite3_str_valuePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_str>)>();

  int sqlite3_status(
    int op,
    ffi.Pointer<ffi.Int> pCurrent,
    ffi.Pointer<ffi.Int> pHighwater,
    int resetFlag,
  ) {
    return _sqlite3_status(
      op,
      pCurrent,
      pHighwater,
      resetFlag,
    );
  }

  late final _sqlite3_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('sqlite3_status');
  late final _sqlite3_status = _sqlite3_statusPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  int sqlite3_status64(
    int op,
    ffi.Pointer<sqlite3_int64> pCurrent,
    ffi.Pointer<sqlite3_int64> pHighwater,
    int resetFlag,
  ) {
    return _sqlite3_status64(
      op,
      pCurrent,
      pHighwater,
      resetFlag,
    );
  }

  late final _sqlite3_status64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sqlite3_int64>,
              ffi.Pointer<sqlite3_int64>, ffi.Int)>>('sqlite3_status64');
  late final _sqlite3_status64 = _sqlite3_status64Ptr.asFunction<
      int Function(
          int, ffi.Pointer<sqlite3_int64>, ffi.Pointer<sqlite3_int64>, int)>();

  int sqlite3_db_status(
    ffi.Pointer<sqlite3> arg0,
    int op,
    ffi.Pointer<ffi.Int> pCur,
    ffi.Pointer<ffi.Int> pHiwtr,
    int resetFlg,
  ) {
    return _sqlite3_db_status(
      arg0,
      op,
      pCur,
      pHiwtr,
      resetFlg,
    );
  }

  late final _sqlite3_db_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('sqlite3_db_status');
  late final _sqlite3_db_status = _sqlite3_db_statusPtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, int)>();

  int sqlite3_stmt_status(
    ffi.Pointer<sqlite3_stmt> arg0,
    int op,
    int resetFlg,
  ) {
    return _sqlite3_stmt_status(
      arg0,
      op,
      resetFlg,
    );
  }

  late final _sqlite3_stmt_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int,
              ffi.Int)>>('sqlite3_stmt_status');
  late final _sqlite3_stmt_status = _sqlite3_stmt_statusPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_stmt>, int, int)>();

  ffi.Pointer<sqlite3_backup> sqlite3_backup_init(
    ffi.Pointer<sqlite3> pDest,
    ffi.Pointer<ffi.Char> zDestName,
    ffi.Pointer<sqlite3> pSource,
    ffi.Pointer<ffi.Char> zSourceName,
  ) {
    return _sqlite3_backup_init(
      pDest,
      zDestName,
      pSource,
      zSourceName,
    );
  }

  late final _sqlite3_backup_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_backup> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_backup_init');
  late final _sqlite3_backup_init = _sqlite3_backup_initPtr.asFunction<
      ffi.Pointer<sqlite3_backup> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>)>();

  int sqlite3_backup_step(
    ffi.Pointer<sqlite3_backup> p,
    int nPage,
  ) {
    return _sqlite3_backup_step(
      p,
      nPage,
    );
  }

  late final _sqlite3_backup_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_backup>, ffi.Int)>>('sqlite3_backup_step');
  late final _sqlite3_backup_step = _sqlite3_backup_stepPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_backup>, int)>();

  int sqlite3_backup_finish(
    ffi.Pointer<sqlite3_backup> p,
  ) {
    return _sqlite3_backup_finish(
      p,
    );
  }

  late final _sqlite3_backup_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_backup>)>>(
      'sqlite3_backup_finish');
  late final _sqlite3_backup_finish = _sqlite3_backup_finishPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_backup>)>();

  int sqlite3_backup_remaining(
    ffi.Pointer<sqlite3_backup> p,
  ) {
    return _sqlite3_backup_remaining(
      p,
    );
  }

  late final _sqlite3_backup_remainingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_backup>)>>(
      'sqlite3_backup_remaining');
  late final _sqlite3_backup_remaining = _sqlite3_backup_remainingPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_backup>)>();

  int sqlite3_backup_pagecount(
    ffi.Pointer<sqlite3_backup> p,
  ) {
    return _sqlite3_backup_pagecount(
      p,
    );
  }

  late final _sqlite3_backup_pagecountPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_backup>)>>(
      'sqlite3_backup_pagecount');
  late final _sqlite3_backup_pagecount = _sqlite3_backup_pagecountPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_backup>)>();

  int sqlite3_unlock_notify(
    ffi.Pointer<sqlite3> pBlocked,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Pointer<ffi.Void>> apArg, ffi.Int nArg)>>
        xNotify,
    ffi.Pointer<ffi.Void> pNotifyArg,
  ) {
    return _sqlite3_unlock_notify(
      pBlocked,
      xNotify,
      pNotifyArg,
    );
  }

  late final _sqlite3_unlock_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Pointer<ffi.Void>> apArg,
                          ffi.Int nArg)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_unlock_notify');
  late final _sqlite3_unlock_notify = _sqlite3_unlock_notifyPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Pointer<ffi.Void>> apArg, ffi.Int nArg)>>,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_stricmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sqlite3_stricmp(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_stricmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_stricmp');
  late final _sqlite3_stricmp = _sqlite3_stricmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_strnicmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _sqlite3_strnicmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_strnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('sqlite3_strnicmp');
  late final _sqlite3_strnicmp = _sqlite3_strnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int sqlite3_strglob(
    ffi.Pointer<ffi.Char> zGlob,
    ffi.Pointer<ffi.Char> zStr,
  ) {
    return _sqlite3_strglob(
      zGlob,
      zStr,
    );
  }

  late final _sqlite3_strglobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_strglob');
  late final _sqlite3_strglob = _sqlite3_strglobPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_strlike(
    ffi.Pointer<ffi.Char> zGlob,
    ffi.Pointer<ffi.Char> zStr,
    int cEsc,
  ) {
    return _sqlite3_strlike(
      zGlob,
      zStr,
      cEsc,
    );
  }

  late final _sqlite3_strlikePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('sqlite3_strlike');
  late final _sqlite3_strlike = _sqlite3_strlikePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void sqlite3_log(
    int iErrCode,
    ffi.Pointer<ffi.Char> zFormat,
  ) {
    return _sqlite3_log(
      iErrCode,
      zFormat,
    );
  }

  late final _sqlite3_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('sqlite3_log');
  late final _sqlite3_log =
      _sqlite3_logPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> sqlite3_wal_hook(
    ffi.Pointer<sqlite3> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<sqlite3>,
                    ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _sqlite3_wal_hook(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sqlite3_wal_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<sqlite3>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_wal_hook');
  late final _sqlite3_wal_hook = _sqlite3_wal_hookPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<sqlite3>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<sqlite3>,
                      ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<ffi.Void>)>();

  int sqlite3_wal_autocheckpoint(
    ffi.Pointer<sqlite3> db,
    int N,
  ) {
    return _sqlite3_wal_autocheckpoint(
      db,
      N,
    );
  }

  late final _sqlite3_wal_autocheckpointPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int)>>(
      'sqlite3_wal_autocheckpoint');
  late final _sqlite3_wal_autocheckpoint = _sqlite3_wal_autocheckpointPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_wal_checkpoint(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zDb,
  ) {
    return _sqlite3_wal_checkpoint(
      db,
      zDb,
    );
  }

  late final _sqlite3_wal_checkpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_wal_checkpoint');
  late final _sqlite3_wal_checkpoint = _sqlite3_wal_checkpointPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  int sqlite3_wal_checkpoint_v2(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zDb,
    int eMode,
    ffi.Pointer<ffi.Int> pnLog,
    ffi.Pointer<ffi.Int> pnCkpt,
  ) {
    return _sqlite3_wal_checkpoint_v2(
      db,
      zDb,
      eMode,
      pnLog,
      pnCkpt,
    );
  }

  late final _sqlite3_wal_checkpoint_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('sqlite3_wal_checkpoint_v2');
  late final _sqlite3_wal_checkpoint_v2 =
      _sqlite3_wal_checkpoint_v2Ptr.asFunction<
          int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int sqlite3_vtab_config(
    ffi.Pointer<sqlite3> arg0,
    int op,
  ) {
    return _sqlite3_vtab_config(
      arg0,
      op,
    );
  }

  late final _sqlite3_vtab_configPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Int)>>(
      'sqlite3_vtab_config');
  late final _sqlite3_vtab_config = _sqlite3_vtab_configPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, int)>();

  int sqlite3_vtab_on_conflict(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_vtab_on_conflict(
      arg0,
    );
  }

  late final _sqlite3_vtab_on_conflictPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_vtab_on_conflict');
  late final _sqlite3_vtab_on_conflict = _sqlite3_vtab_on_conflictPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_vtab_nochange(
    ffi.Pointer<sqlite3_context> arg0,
  ) {
    return _sqlite3_vtab_nochange(
      arg0,
    );
  }

  late final _sqlite3_vtab_nochangePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_context>)>>(
      'sqlite3_vtab_nochange');
  late final _sqlite3_vtab_nochange = _sqlite3_vtab_nochangePtr
      .asFunction<int Function(ffi.Pointer<sqlite3_context>)>();

  ffi.Pointer<ffi.Char> sqlite3_vtab_collation(
    ffi.Pointer<sqlite3_index_info> arg0,
    int arg1,
  ) {
    return _sqlite3_vtab_collation(
      arg0,
      arg1,
    );
  }

  late final _sqlite3_vtab_collationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_index_info>,
              ffi.Int)>>('sqlite3_vtab_collation');
  late final _sqlite3_vtab_collation = _sqlite3_vtab_collationPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sqlite3_index_info>, int)>();

  int sqlite3_vtab_distinct(
    ffi.Pointer<sqlite3_index_info> arg0,
  ) {
    return _sqlite3_vtab_distinct(
      arg0,
    );
  }

  late final _sqlite3_vtab_distinctPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_index_info>)>>(
      'sqlite3_vtab_distinct');
  late final _sqlite3_vtab_distinct = _sqlite3_vtab_distinctPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_index_info>)>();

  int sqlite3_vtab_in(
    ffi.Pointer<sqlite3_index_info> arg0,
    int iCons,
    int bHandle,
  ) {
    return _sqlite3_vtab_in(
      arg0,
      iCons,
      bHandle,
    );
  }

  late final _sqlite3_vtab_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_index_info>, ffi.Int,
              ffi.Int)>>('sqlite3_vtab_in');
  late final _sqlite3_vtab_in = _sqlite3_vtab_inPtr
      .asFunction<int Function(ffi.Pointer<sqlite3_index_info>, int, int)>();

  int sqlite3_vtab_in_first(
    ffi.Pointer<sqlite3_value> pVal,
    ffi.Pointer<ffi.Pointer<sqlite3_value>> ppOut,
  ) {
    return _sqlite3_vtab_in_first(
      pVal,
      ppOut,
    );
  }

  late final _sqlite3_vtab_in_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sqlite3_value>,
                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>(
      'sqlite3_vtab_in_first');
  late final _sqlite3_vtab_in_first = _sqlite3_vtab_in_firstPtr.asFunction<
      int Function(ffi.Pointer<sqlite3_value>,
          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>();

  int sqlite3_vtab_in_next(
    ffi.Pointer<sqlite3_value> pVal,
    ffi.Pointer<ffi.Pointer<sqlite3_value>> ppOut,
  ) {
    return _sqlite3_vtab_in_next(
      pVal,
      ppOut,
    );
  }

  late final _sqlite3_vtab_in_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sqlite3_value>,
                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>(
      'sqlite3_vtab_in_next');
  late final _sqlite3_vtab_in_next = _sqlite3_vtab_in_nextPtr.asFunction<
      int Function(ffi.Pointer<sqlite3_value>,
          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>();

  int sqlite3_vtab_rhs_value(
    ffi.Pointer<sqlite3_index_info> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<sqlite3_value>> ppVal,
  ) {
    return _sqlite3_vtab_rhs_value(
      arg0,
      arg1,
      ppVal,
    );
  }

  late final _sqlite3_vtab_rhs_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sqlite3_index_info>, ffi.Int,
                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>(
      'sqlite3_vtab_rhs_value');
  late final _sqlite3_vtab_rhs_value = _sqlite3_vtab_rhs_valuePtr.asFunction<
      int Function(ffi.Pointer<sqlite3_index_info>, int,
          ffi.Pointer<ffi.Pointer<sqlite3_value>>)>();

  int sqlite3_stmt_scanstatus(
    ffi.Pointer<sqlite3_stmt> pStmt,
    int idx,
    int iScanStatusOp,
    ffi.Pointer<ffi.Void> pOut,
  ) {
    return _sqlite3_stmt_scanstatus(
      pStmt,
      idx,
      iScanStatusOp,
      pOut,
    );
  }

  late final _sqlite3_stmt_scanstatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('sqlite3_stmt_scanstatus');
  late final _sqlite3_stmt_scanstatus = _sqlite3_stmt_scanstatusPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_stmt>, int, int, ffi.Pointer<ffi.Void>)>();

  int sqlite3_stmt_scanstatus_v2(
    ffi.Pointer<sqlite3_stmt> pStmt,
    int idx,
    int iScanStatusOp,
    int flags,
    ffi.Pointer<ffi.Void> pOut,
  ) {
    return _sqlite3_stmt_scanstatus_v2(
      pStmt,
      idx,
      iScanStatusOp,
      flags,
      pOut,
    );
  }

  late final _sqlite3_stmt_scanstatus_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_stmt>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('sqlite3_stmt_scanstatus_v2');
  late final _sqlite3_stmt_scanstatus_v2 =
      _sqlite3_stmt_scanstatus_v2Ptr.asFunction<
          int Function(ffi.Pointer<sqlite3_stmt>, int, int, int,
              ffi.Pointer<ffi.Void>)>();

  void sqlite3_stmt_scanstatus_reset(
    ffi.Pointer<sqlite3_stmt> arg0,
  ) {
    return _sqlite3_stmt_scanstatus_reset(
      arg0,
    );
  }

  late final _sqlite3_stmt_scanstatus_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_stmt>)>>(
          'sqlite3_stmt_scanstatus_reset');
  late final _sqlite3_stmt_scanstatus_reset = _sqlite3_stmt_scanstatus_resetPtr
      .asFunction<void Function(ffi.Pointer<sqlite3_stmt>)>();

  int sqlite3_db_cacheflush(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_db_cacheflush(
      arg0,
    );
  }

  late final _sqlite3_db_cacheflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_db_cacheflush');
  late final _sqlite3_db_cacheflush = _sqlite3_db_cacheflushPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_system_errno(
    ffi.Pointer<sqlite3> arg0,
  ) {
    return _sqlite3_system_errno(
      arg0,
    );
  }

  late final _sqlite3_system_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3>)>>(
          'sqlite3_system_errno');
  late final _sqlite3_system_errno =
      _sqlite3_system_errnoPtr.asFunction<int Function(ffi.Pointer<sqlite3>)>();

  int sqlite3_snapshot_get(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSchema,
    ffi.Pointer<ffi.Pointer<sqlite3_snapshot>> ppSnapshot,
  ) {
    return _sqlite3_snapshot_get(
      db,
      zSchema,
      ppSnapshot,
    );
  }

  late final _sqlite3_snapshot_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<sqlite3_snapshot>>)>>(
      'sqlite3_snapshot_get');
  late final _sqlite3_snapshot_get = _sqlite3_snapshot_getPtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<sqlite3_snapshot>>)>();

  int sqlite3_snapshot_open(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSchema,
    ffi.Pointer<sqlite3_snapshot> pSnapshot,
  ) {
    return _sqlite3_snapshot_open(
      db,
      zSchema,
      pSnapshot,
    );
  }

  late final _sqlite3_snapshot_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<sqlite3_snapshot>)>>('sqlite3_snapshot_open');
  late final _sqlite3_snapshot_open = _sqlite3_snapshot_openPtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<sqlite3_snapshot>)>();

  void sqlite3_snapshot_free(
    ffi.Pointer<sqlite3_snapshot> arg0,
  ) {
    return _sqlite3_snapshot_free(
      arg0,
    );
  }

  late final _sqlite3_snapshot_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_snapshot>)>>(
      'sqlite3_snapshot_free');
  late final _sqlite3_snapshot_free = _sqlite3_snapshot_freePtr
      .asFunction<void Function(ffi.Pointer<sqlite3_snapshot>)>();

  int sqlite3_snapshot_cmp(
    ffi.Pointer<sqlite3_snapshot> p1,
    ffi.Pointer<sqlite3_snapshot> p2,
  ) {
    return _sqlite3_snapshot_cmp(
      p1,
      p2,
    );
  }

  late final _sqlite3_snapshot_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_snapshot>,
              ffi.Pointer<sqlite3_snapshot>)>>('sqlite3_snapshot_cmp');
  late final _sqlite3_snapshot_cmp = _sqlite3_snapshot_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<sqlite3_snapshot>, ffi.Pointer<sqlite3_snapshot>)>();

  int sqlite3_snapshot_recover(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zDb,
  ) {
    return _sqlite3_snapshot_recover(
      db,
      zDb,
    );
  }

  late final _sqlite3_snapshot_recoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>)>>('sqlite3_snapshot_recover');
  late final _sqlite3_snapshot_recover = _sqlite3_snapshot_recoverPtr
      .asFunction<int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> sqlite3_serialize(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSchema,
    ffi.Pointer<sqlite3_int64> piSize,
    int mFlags,
  ) {
    return _sqlite3_serialize(
      db,
      zSchema,
      piSize,
      mFlags,
    );
  }

  late final _sqlite3_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<sqlite3_int64>,
              ffi.UnsignedInt)>>('sqlite3_serialize');
  late final _sqlite3_serialize = _sqlite3_serializePtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<sqlite3>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<sqlite3_int64>, int)>();

  int sqlite3_deserialize(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zSchema,
    ffi.Pointer<ffi.UnsignedChar> pData,
    int szDb,
    int szBuf,
    int mFlags,
  ) {
    return _sqlite3_deserialize(
      db,
      zSchema,
      pData,
      szDb,
      szBuf,
      mFlags,
    );
  }

  late final _sqlite3_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              sqlite3_int64,
              sqlite3_int64,
              ffi.UnsignedInt)>>('sqlite3_deserialize');
  late final _sqlite3_deserialize = _sqlite3_deserializePtr.asFunction<
      int Function(ffi.Pointer<sqlite3>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  int sqlite3_rtree_geometry_callback(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zGeom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<sqlite3_rtree_geometry>, ffi.Int,
                    ffi.Pointer<sqlite3_rtree_dbl>, ffi.Pointer<ffi.Int>)>>
        xGeom,
    ffi.Pointer<ffi.Void> pContext,
  ) {
    return _sqlite3_rtree_geometry_callback(
      db,
      zGeom,
      xGeom,
      pContext,
    );
  }

  late final _sqlite3_rtree_geometry_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<sqlite3_rtree_geometry>,
                          ffi.Int,
                          ffi.Pointer<sqlite3_rtree_dbl>,
                          ffi.Pointer<ffi.Int>)>>,
              ffi.Pointer<ffi.Void>)>>('sqlite3_rtree_geometry_callback');
  late final _sqlite3_rtree_geometry_callback =
      _sqlite3_rtree_geometry_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<sqlite3_rtree_geometry>,
                          ffi.Int,
                          ffi.Pointer<sqlite3_rtree_dbl>,
                          ffi.Pointer<ffi.Int>)>>,
              ffi.Pointer<ffi.Void>)>();

  int sqlite3_rtree_query_callback(
    ffi.Pointer<sqlite3> db,
    ffi.Pointer<ffi.Char> zQueryFunc,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<sqlite3_rtree_query_info>)>>
        xQueryFunc,
    ffi.Pointer<ffi.Void> pContext,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        xDestructor,
  ) {
    return _sqlite3_rtree_query_callback(
      db,
      zQueryFunc,
      xQueryFunc,
      pContext,
      xDestructor,
    );
  }

  late final _sqlite3_rtree_query_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3>,
                  ffi.Pointer<ffi.Char>,
                  ffi
                      .Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<sqlite3_rtree_query_info>)>>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'sqlite3_rtree_query_callback');
  late final _sqlite3_rtree_query_callback =
      _sqlite3_rtree_query_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<sqlite3_rtree_query_info>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();
}

final class sqlite3 extends ffi.Opaque {}

typedef sqlite_int64 = ffi.LongLong;
typedef Dartsqlite_int64 = int;
typedef sqlite_uint64 = ffi.UnsignedLongLong;
typedef Dartsqlite_uint64 = int;
typedef sqlite3_int64 = sqlite_int64;
typedef sqlite3_uint64 = sqlite_uint64;
typedef sqlite3_callbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>,
    ffi.Int,
    ffi.Pointer<ffi.Pointer<ffi.Char>>,
    ffi.Pointer<ffi.Pointer<ffi.Char>>);
typedef Dartsqlite3_callbackFunction = int Function(ffi.Pointer<ffi.Void>, int,
    ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>);
typedef sqlite3_callback
    = ffi.Pointer<ffi.NativeFunction<sqlite3_callbackFunction>>;

final class sqlite3_io_methods extends ffi.Opaque {}

final class sqlite3_file extends ffi.Struct {
  external ffi.Pointer<sqlite3_io_methods> pMethods;
}

final class sqlite3_mutex extends ffi.Opaque {}

final class sqlite3_api_routines extends ffi.Opaque {}

typedef sqlite3_filename = ffi.Pointer<ffi.Char>;
typedef sqlite3_syscall_ptrFunction = ffi.Void Function();
typedef Dartsqlite3_syscall_ptrFunction = void Function();
typedef sqlite3_syscall_ptr
    = ffi.Pointer<ffi.NativeFunction<sqlite3_syscall_ptrFunction>>;

final class sqlite3_vfs extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  @ffi.Int()
  external int szOsFile;

  @ffi.Int()
  external int mxPathname;

  external ffi.Pointer<sqlite3_vfs> pNext;

  external ffi.Pointer<ffi.Char> zName;

  external ffi.Pointer<ffi.Void> pAppData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, sqlite3_filename,
              ffi.Pointer<sqlite3_file>, ffi.Int, ffi.Pointer<ffi.Int>)>> xOpen;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      xDelete;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Int>)>> xAccess;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>> xFullPathname;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>)>> xDlOpen;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xDlError;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<sqlite3_vfs>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>> xDlSym;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Void>)>> xDlClose;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xRandomness;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Int)>>
      xSleep;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Double>)>> xCurrentTime;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xGetLastError;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Pointer<sqlite3_int64>)>>
      xCurrentTimeInt64;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
              sqlite3_syscall_ptr)>> xSetSystemCall;

  external ffi.Pointer<
      ffi.NativeFunction<
          sqlite3_syscall_ptr Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>)>> xGetSystemCall;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>)>>
      xNextSystemCall;
}

final class sqlite3_mem_methods extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>
      xMalloc;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xFree;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
      xRealloc;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      xSize;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> xRoundup;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      xInit;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xShutdown;

  external ffi.Pointer<ffi.Void> pAppData;
}

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

final class sqlite3_stmt extends ffi.Opaque {}

final class sqlite3_value extends ffi.Opaque {}

final class sqlite3_context extends ffi.Opaque {}

typedef sqlite3_destructor_typeFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void>);
typedef Dartsqlite3_destructor_typeFunction = void Function(
    ffi.Pointer<ffi.Void>);
typedef sqlite3_destructor_type
    = ffi.Pointer<ffi.NativeFunction<sqlite3_destructor_typeFunction>>;

final class sqlite3_index_constraint extends ffi.Struct {
  @ffi.Int()
  external int iColumn;

  @ffi.UnsignedChar()
  external int op;

  @ffi.UnsignedChar()
  external int usable;

  @ffi.Int()
  external int iTermOffset;
}

final class sqlite3_index_orderby extends ffi.Struct {
  @ffi.Int()
  external int iColumn;

  @ffi.UnsignedChar()
  external int desc;
}

final class sqlite3_index_constraint_usage extends ffi.Struct {
  @ffi.Int()
  external int argvIndex;

  @ffi.UnsignedChar()
  external int omit;
}

final class sqlite3_index_info extends ffi.Struct {
  @ffi.Int()
  external int nConstraint;

  external ffi.Pointer<sqlite3_index_constraint> aConstraint;

  @ffi.Int()
  external int nOrderBy;

  external ffi.Pointer<sqlite3_index_orderby> aOrderBy;

  external ffi.Pointer<sqlite3_index_constraint_usage> aConstraintUsage;

  @ffi.Int()
  external int idxNum;

  external ffi.Pointer<ffi.Char> idxStr;

  @ffi.Int()
  external int needToFreeIdxStr;

  @ffi.Int()
  external int orderByConsumed;

  @ffi.Double()
  external double estimatedCost;

  @sqlite3_int64()
  external int estimatedRows;

  @ffi.Int()
  external int idxFlags;

  @sqlite3_uint64()
  external int colUsed;
}

final class sqlite3_vtab_cursor extends ffi.Struct {
  external ffi.Pointer<sqlite3_vtab> pVtab;
}

final class sqlite3_module extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<sqlite3_vtab>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> xCreate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<sqlite3_vtab>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> xConnect;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vtab>, ffi.Pointer<sqlite3_index_info>)>>
      xBestIndex;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab)>>
      xDisconnect;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab)>>
      xDestroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab,
              ffi.Pointer<ffi.Pointer<sqlite3_vtab_cursor>> ppCursor)>> xOpen;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab_cursor>)>>
      xClose;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_vtab_cursor>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_value>>)>> xFilter;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab_cursor>)>>
      xNext;

  external ffi.Pointer<
      ffi
      .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab_cursor>)>> xEof;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vtab_cursor>,
              ffi.Pointer<sqlite3_context>, ffi.Int)>> xColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vtab_cursor>,
              ffi.Pointer<sqlite3_int64>)>> xRowid;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_vtab>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<sqlite3_value>>,
              ffi.Pointer<sqlite3_int64>)>> xUpdate;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab)>>
      xBegin;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab)>>
      xSync;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab)>>
      xCommit;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab> pVTab)>>
      xRollback;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_vtab> pVtab,
              ffi.Int nArg,
              ffi.Pointer<ffi.Char> zName,
              ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<sqlite3_context>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>>
                  pxFunc,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppArg)>> xFindFunction;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vtab> pVtab, ffi.Pointer<ffi.Char> zNew)>>
      xRename;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab>, ffi.Int)>>
      xSavepoint;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab>, ffi.Int)>>
      xRelease;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vtab>, ffi.Int)>>
      xRollbackTo;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      xShadowName;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_vtab> pVTab,
              ffi.Pointer<ffi.Char> zSchema,
              ffi.Pointer<ffi.Char> zTabName,
              ffi.Int mFlags,
              ffi.Pointer<ffi.Pointer<ffi.Char>> pzErr)>> xIntegrity;
}

final class sqlite3_vtab extends ffi.Struct {
  external ffi.Pointer<sqlite3_module> pModule;

  @ffi.Int()
  external int nRef;

  external ffi.Pointer<ffi.Char> zErrMsg;
}

final class sqlite3_blob extends ffi.Opaque {}

final class sqlite3_mutex_methods extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> xMutexInit;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> xMutexEnd;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<sqlite3_mutex> Function(ffi.Int)>>
      xMutexAlloc;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_mutex>)>>
      xMutexFree;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_mutex>)>>
      xMutexEnter;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_mutex>)>>
      xMutexTry;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_mutex>)>>
      xMutexLeave;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_mutex>)>>
      xMutexHeld;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_mutex>)>>
      xMutexNotheld;
}

final class sqlite3_str extends ffi.Opaque {}

final class sqlite3_pcache extends ffi.Opaque {}

final class sqlite3_pcache_page extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pBuf;

  external ffi.Pointer<ffi.Void> pExtra;
}

final class sqlite3_pcache_methods2 extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<ffi.Void> pArg;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      xInit;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xShutdown;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_pcache> Function(
              ffi.Int szPage, ffi.Int szExtra, ffi.Int bPurgeable)>> xCreate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_pcache>, ffi.Int)>> xCachesize;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_pcache>)>>
      xPagecount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_pcache_page> Function(
              ffi.Pointer<sqlite3_pcache>, ffi.UnsignedInt, ffi.Int)>> xFetch;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_pcache>,
              ffi.Pointer<sqlite3_pcache_page>, ffi.Int)>> xUnpin;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_pcache>,
              ffi.Pointer<sqlite3_pcache_page>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>> xRekey;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<sqlite3_pcache>, ffi.UnsignedInt)>>
      xTruncate;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_pcache>)>>
      xDestroy;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_pcache>)>>
      xShrink;
}

final class sqlite3_pcache_methods extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pArg;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      xInit;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xShutdown;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<sqlite3_pcache> Function(
              ffi.Int szPage, ffi.Int bPurgeable)>> xCreate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_pcache>, ffi.Int)>> xCachesize;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_pcache>)>>
      xPagecount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_pcache>, ffi.UnsignedInt, ffi.Int)>> xFetch;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<sqlite3_pcache>, ffi.Pointer<ffi.Void>, ffi.Int)>>
      xUnpin;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sqlite3_pcache>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt, ffi.UnsignedInt)>> xRekey;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<sqlite3_pcache>, ffi.UnsignedInt)>>
      xTruncate;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_pcache>)>>
      xDestroy;
}

final class sqlite3_backup extends ffi.Opaque {}

final class sqlite3_snapshot extends ffi.Struct {
  @ffi.Array.multi([48])
  external ffi.Array<ffi.UnsignedChar> hidden;
}

typedef sqlite3_rtree_dbl = ffi.Double;
typedef Dartsqlite3_rtree_dbl = double;

final class sqlite3_rtree_geometry extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pContext;

  @ffi.Int()
  external int nParam;

  external ffi.Pointer<sqlite3_rtree_dbl> aParam;

  external ffi.Pointer<ffi.Void> pUser;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xDelUser;
}

final class sqlite3_rtree_query_info extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pContext;

  @ffi.Int()
  external int nParam;

  external ffi.Pointer<sqlite3_rtree_dbl> aParam;

  external ffi.Pointer<ffi.Void> pUser;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xDelUser;

  external ffi.Pointer<sqlite3_rtree_dbl> aCoord;

  external ffi.Pointer<ffi.UnsignedInt> anQueue;

  @ffi.Int()
  external int nCoord;

  @ffi.Int()
  external int iLevel;

  @ffi.Int()
  external int mxLevel;

  @sqlite3_int64()
  external int iRowid;

  @sqlite3_rtree_dbl()
  external double rParentScore;

  @ffi.Int()
  external int eParentWithin;

  @ffi.Int()
  external int eWithin;

  @sqlite3_rtree_dbl()
  external double rScore;

  external ffi.Pointer<ffi.Pointer<sqlite3_value>> apSqlParam;
}

final class Fts5Context extends ffi.Opaque {}

final class Fts5PhraseIter extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> a;

  external ffi.Pointer<ffi.UnsignedChar> b;
}

final class Fts5ExtensionApi extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<Fts5Context>)>> xUserData;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Fts5Context>)>>
      xColumnCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>, ffi.Pointer<sqlite3_int64>)>> xRowCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Fts5Context>, ffi.Int,
              ffi.Pointer<sqlite3_int64>)>> xColumnTotalSize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int,
                          ffi.Int,
                          ffi.Int)>>)>> xTokenize;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Fts5Context>)>>
      xPhraseCount;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<Fts5Context>, ffi.Int)>>
      xPhraseSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<Fts5Context>, ffi.Pointer<ffi.Int>)>>
      xInstCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> xInst;

  external ffi.Pointer<
          ffi.NativeFunction<sqlite3_int64 Function(ffi.Pointer<Fts5Context>)>>
      xRowid;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>> xColumnText;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<Fts5Context>, ffi.Int, ffi.Pointer<ffi.Int>)>>
      xColumnSize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<Fts5ExtensionApi>,
                          ffi.Pointer<Fts5Context>,
                          ffi.Pointer<ffi.Void>)>>)>> xQueryPhrase;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>> xSetAuxdata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Fts5Context>, ffi.Int)>> xGetAuxdata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Pointer<Fts5PhraseIter>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> xPhraseFirst;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Fts5Context>,
              ffi.Pointer<Fts5PhraseIter>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> xPhraseNext;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Pointer<Fts5PhraseIter>,
              ffi.Pointer<ffi.Int>)>> xPhraseFirstColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Fts5Context>,
              ffi.Pointer<Fts5PhraseIter>,
              ffi.Pointer<ffi.Int>)>> xPhraseNextColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>> xQueryToken;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>> xInstToken;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>> xColumnLocale;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int,
                          ffi.Int,
                          ffi.Int)>>)>> xTokenize_v2;
}

typedef fts5_extension_functionFunction = ffi.Void Function(
    ffi.Pointer<Fts5ExtensionApi> pApi,
    ffi.Pointer<Fts5Context> pFts,
    ffi.Pointer<sqlite3_context> pCtx,
    ffi.Int nVal,
    ffi.Pointer<ffi.Pointer<sqlite3_value>> apVal);
typedef Dartfts5_extension_functionFunction = void Function(
    ffi.Pointer<Fts5ExtensionApi> pApi,
    ffi.Pointer<Fts5Context> pFts,
    ffi.Pointer<sqlite3_context> pCtx,
    int nVal,
    ffi.Pointer<ffi.Pointer<sqlite3_value>> apVal);
typedef fts5_extension_function
    = ffi.Pointer<ffi.NativeFunction<fts5_extension_functionFunction>>;

final class Fts5Tokenizer extends ffi.Opaque {}

final class fts5_tokenizer_v2 extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Fts5Tokenizer>>)>> xCreate;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Fts5Tokenizer>)>>
      xDelete;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Tokenizer>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int,
                          ffi.Int,
                          ffi.Int)>>)>> xTokenize;
}

final class fts5_tokenizer extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Fts5Tokenizer>>)>> xCreate;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Fts5Tokenizer>)>>
      xDelete;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Fts5Tokenizer>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int,
                          ffi.Int,
                          ffi.Int)>>)>> xTokenize;
}

final class fts5_api extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fts5_api> pApi,
              ffi.Pointer<ffi.Char> zName,
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<fts5_tokenizer> pTokenizer,
              ffi.Pointer<
                      ffi
                      .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
                  xDestroy)>> xCreateTokenizer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fts5_api> pApi,
              ffi.Pointer<ffi.Char> zName,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppUserData,
              ffi.Pointer<fts5_tokenizer> pTokenizer)>> xFindTokenizer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fts5_api> pApi,
              ffi.Pointer<ffi.Char> zName,
              ffi.Pointer<ffi.Void> pUserData,
              fts5_extension_function xFunction,
              ffi.Pointer<
                      ffi
                      .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
                  xDestroy)>> xCreateFunction;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fts5_api> pApi,
              ffi.Pointer<ffi.Char> zName,
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<fts5_tokenizer_v2> pTokenizer,
              ffi.Pointer<
                      ffi
                      .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
                  xDestroy)>> xCreateTokenizer_v2;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<fts5_api> pApi,
                  ffi.Pointer<ffi.Char> zName,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ppUserData,
                  ffi.Pointer<ffi.Pointer<fts5_tokenizer_v2>> ppTokenizer)>>
      xFindTokenizer_v2;
}

const String SQLITE_VERSION = '3.50.2';

const int SQLITE_VERSION_NUMBER = 3050002;

const String SQLITE_SOURCE_ID =
    '2025-06-28 14:00:48 2af157d77fb1304a74176eaee7fbc7c7e932d946bf25325e9c26c91db19e3079';

const int SQLITE_OK = 0;

const int SQLITE_ERROR = 1;

const int SQLITE_INTERNAL = 2;

const int SQLITE_PERM = 3;

const int SQLITE_ABORT = 4;

const int SQLITE_BUSY = 5;

const int SQLITE_LOCKED = 6;

const int SQLITE_NOMEM = 7;

const int SQLITE_READONLY = 8;

const int SQLITE_INTERRUPT = 9;

const int SQLITE_IOERR = 10;

const int SQLITE_CORRUPT = 11;

const int SQLITE_NOTFOUND = 12;

const int SQLITE_FULL = 13;

const int SQLITE_CANTOPEN = 14;

const int SQLITE_PROTOCOL = 15;

const int SQLITE_EMPTY = 16;

const int SQLITE_SCHEMA = 17;

const int SQLITE_TOOBIG = 18;

const int SQLITE_CONSTRAINT = 19;

const int SQLITE_MISMATCH = 20;

const int SQLITE_MISUSE = 21;

const int SQLITE_NOLFS = 22;

const int SQLITE_AUTH = 23;

const int SQLITE_FORMAT = 24;

const int SQLITE_RANGE = 25;

const int SQLITE_NOTADB = 26;

const int SQLITE_NOTICE = 27;

const int SQLITE_WARNING = 28;

const int SQLITE_ROW = 100;

const int SQLITE_DONE = 101;

const int SQLITE_ERROR_MISSING_COLLSEQ = 257;

const int SQLITE_ERROR_RETRY = 513;

const int SQLITE_ERROR_SNAPSHOT = 769;

const int SQLITE_IOERR_READ = 266;

const int SQLITE_IOERR_SHORT_READ = 522;

const int SQLITE_IOERR_WRITE = 778;

const int SQLITE_IOERR_FSYNC = 1034;

const int SQLITE_IOERR_DIR_FSYNC = 1290;

const int SQLITE_IOERR_TRUNCATE = 1546;

const int SQLITE_IOERR_FSTAT = 1802;

const int SQLITE_IOERR_UNLOCK = 2058;

const int SQLITE_IOERR_RDLOCK = 2314;

const int SQLITE_IOERR_DELETE = 2570;

const int SQLITE_IOERR_BLOCKED = 2826;

const int SQLITE_IOERR_NOMEM = 3082;

const int SQLITE_IOERR_ACCESS = 3338;

const int SQLITE_IOERR_CHECKRESERVEDLOCK = 3594;

const int SQLITE_IOERR_LOCK = 3850;

const int SQLITE_IOERR_CLOSE = 4106;

const int SQLITE_IOERR_DIR_CLOSE = 4362;

const int SQLITE_IOERR_SHMOPEN = 4618;

const int SQLITE_IOERR_SHMSIZE = 4874;

const int SQLITE_IOERR_SHMLOCK = 5130;

const int SQLITE_IOERR_SHMMAP = 5386;

const int SQLITE_IOERR_SEEK = 5642;

const int SQLITE_IOERR_DELETE_NOENT = 5898;

const int SQLITE_IOERR_MMAP = 6154;

const int SQLITE_IOERR_GETTEMPPATH = 6410;

const int SQLITE_IOERR_CONVPATH = 6666;

const int SQLITE_IOERR_VNODE = 6922;

const int SQLITE_IOERR_AUTH = 7178;

const int SQLITE_IOERR_BEGIN_ATOMIC = 7434;

const int SQLITE_IOERR_COMMIT_ATOMIC = 7690;

const int SQLITE_IOERR_ROLLBACK_ATOMIC = 7946;

const int SQLITE_IOERR_DATA = 8202;

const int SQLITE_IOERR_CORRUPTFS = 8458;

const int SQLITE_IOERR_IN_PAGE = 8714;

const int SQLITE_LOCKED_SHAREDCACHE = 262;

const int SQLITE_LOCKED_VTAB = 518;

const int SQLITE_BUSY_RECOVERY = 261;

const int SQLITE_BUSY_SNAPSHOT = 517;

const int SQLITE_BUSY_TIMEOUT = 773;

const int SQLITE_CANTOPEN_NOTEMPDIR = 270;

const int SQLITE_CANTOPEN_ISDIR = 526;

const int SQLITE_CANTOPEN_FULLPATH = 782;

const int SQLITE_CANTOPEN_CONVPATH = 1038;

const int SQLITE_CANTOPEN_DIRTYWAL = 1294;

const int SQLITE_CANTOPEN_SYMLINK = 1550;

const int SQLITE_CORRUPT_VTAB = 267;

const int SQLITE_CORRUPT_SEQUENCE = 523;

const int SQLITE_CORRUPT_INDEX = 779;

const int SQLITE_READONLY_RECOVERY = 264;

const int SQLITE_READONLY_CANTLOCK = 520;

const int SQLITE_READONLY_ROLLBACK = 776;

const int SQLITE_READONLY_DBMOVED = 1032;

const int SQLITE_READONLY_CANTINIT = 1288;

const int SQLITE_READONLY_DIRECTORY = 1544;

const int SQLITE_ABORT_ROLLBACK = 516;

const int SQLITE_CONSTRAINT_CHECK = 275;

const int SQLITE_CONSTRAINT_COMMITHOOK = 531;

const int SQLITE_CONSTRAINT_FOREIGNKEY = 787;

const int SQLITE_CONSTRAINT_FUNCTION = 1043;

const int SQLITE_CONSTRAINT_NOTNULL = 1299;

const int SQLITE_CONSTRAINT_PRIMARYKEY = 1555;

const int SQLITE_CONSTRAINT_TRIGGER = 1811;

const int SQLITE_CONSTRAINT_UNIQUE = 2067;

const int SQLITE_CONSTRAINT_VTAB = 2323;

const int SQLITE_CONSTRAINT_ROWID = 2579;

const int SQLITE_CONSTRAINT_PINNED = 2835;

const int SQLITE_CONSTRAINT_DATATYPE = 3091;

const int SQLITE_NOTICE_RECOVER_WAL = 283;

const int SQLITE_NOTICE_RECOVER_ROLLBACK = 539;

const int SQLITE_NOTICE_RBU = 795;

const int SQLITE_WARNING_AUTOINDEX = 284;

const int SQLITE_AUTH_USER = 279;

const int SQLITE_OK_LOAD_PERMANENTLY = 256;

const int SQLITE_OK_SYMLINK = 512;

const int SQLITE_OPEN_READONLY = 1;

const int SQLITE_OPEN_READWRITE = 2;

const int SQLITE_OPEN_CREATE = 4;

const int SQLITE_OPEN_DELETEONCLOSE = 8;

const int SQLITE_OPEN_EXCLUSIVE = 16;

const int SQLITE_OPEN_AUTOPROXY = 32;

const int SQLITE_OPEN_URI = 64;

const int SQLITE_OPEN_MEMORY = 128;

const int SQLITE_OPEN_MAIN_DB = 256;

const int SQLITE_OPEN_TEMP_DB = 512;

const int SQLITE_OPEN_TRANSIENT_DB = 1024;

const int SQLITE_OPEN_MAIN_JOURNAL = 2048;

const int SQLITE_OPEN_TEMP_JOURNAL = 4096;

const int SQLITE_OPEN_SUBJOURNAL = 8192;

const int SQLITE_OPEN_SUPER_JOURNAL = 16384;

const int SQLITE_OPEN_NOMUTEX = 32768;

const int SQLITE_OPEN_FULLMUTEX = 65536;

const int SQLITE_OPEN_SHAREDCACHE = 131072;

const int SQLITE_OPEN_PRIVATECACHE = 262144;

const int SQLITE_OPEN_WAL = 524288;

const int SQLITE_OPEN_NOFOLLOW = 16777216;

const int SQLITE_OPEN_EXRESCODE = 33554432;

const int SQLITE_OPEN_MASTER_JOURNAL = 16384;

const int SQLITE_IOCAP_ATOMIC = 1;

const int SQLITE_IOCAP_ATOMIC512 = 2;

const int SQLITE_IOCAP_ATOMIC1K = 4;

const int SQLITE_IOCAP_ATOMIC2K = 8;

const int SQLITE_IOCAP_ATOMIC4K = 16;

const int SQLITE_IOCAP_ATOMIC8K = 32;

const int SQLITE_IOCAP_ATOMIC16K = 64;

const int SQLITE_IOCAP_ATOMIC32K = 128;

const int SQLITE_IOCAP_ATOMIC64K = 256;

const int SQLITE_IOCAP_SAFE_APPEND = 512;

const int SQLITE_IOCAP_SEQUENTIAL = 1024;

const int SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN = 2048;

const int SQLITE_IOCAP_POWERSAFE_OVERWRITE = 4096;

const int SQLITE_IOCAP_IMMUTABLE = 8192;

const int SQLITE_IOCAP_BATCH_ATOMIC = 16384;

const int SQLITE_IOCAP_SUBPAGE_READ = 32768;

const int SQLITE_LOCK_NONE = 0;

const int SQLITE_LOCK_SHARED = 1;

const int SQLITE_LOCK_RESERVED = 2;

const int SQLITE_LOCK_PENDING = 3;

const int SQLITE_LOCK_EXCLUSIVE = 4;

const int SQLITE_SYNC_NORMAL = 2;

const int SQLITE_SYNC_FULL = 3;

const int SQLITE_SYNC_DATAONLY = 16;

const int SQLITE_FCNTL_LOCKSTATE = 1;

const int SQLITE_FCNTL_GET_LOCKPROXYFILE = 2;

const int SQLITE_FCNTL_SET_LOCKPROXYFILE = 3;

const int SQLITE_FCNTL_LAST_ERRNO = 4;

const int SQLITE_FCNTL_SIZE_HINT = 5;

const int SQLITE_FCNTL_CHUNK_SIZE = 6;

const int SQLITE_FCNTL_FILE_POINTER = 7;

const int SQLITE_FCNTL_SYNC_OMITTED = 8;

const int SQLITE_FCNTL_WIN32_AV_RETRY = 9;

const int SQLITE_FCNTL_PERSIST_WAL = 10;

const int SQLITE_FCNTL_OVERWRITE = 11;

const int SQLITE_FCNTL_VFSNAME = 12;

const int SQLITE_FCNTL_POWERSAFE_OVERWRITE = 13;

const int SQLITE_FCNTL_PRAGMA = 14;

const int SQLITE_FCNTL_BUSYHANDLER = 15;

const int SQLITE_FCNTL_TEMPFILENAME = 16;

const int SQLITE_FCNTL_MMAP_SIZE = 18;

const int SQLITE_FCNTL_TRACE = 19;

const int SQLITE_FCNTL_HAS_MOVED = 20;

const int SQLITE_FCNTL_SYNC = 21;

const int SQLITE_FCNTL_COMMIT_PHASETWO = 22;

const int SQLITE_FCNTL_WIN32_SET_HANDLE = 23;

const int SQLITE_FCNTL_WAL_BLOCK = 24;

const int SQLITE_FCNTL_ZIPVFS = 25;

const int SQLITE_FCNTL_RBU = 26;

const int SQLITE_FCNTL_VFS_POINTER = 27;

const int SQLITE_FCNTL_JOURNAL_POINTER = 28;

const int SQLITE_FCNTL_WIN32_GET_HANDLE = 29;

const int SQLITE_FCNTL_PDB = 30;

const int SQLITE_FCNTL_BEGIN_ATOMIC_WRITE = 31;

const int SQLITE_FCNTL_COMMIT_ATOMIC_WRITE = 32;

const int SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE = 33;

const int SQLITE_FCNTL_LOCK_TIMEOUT = 34;

const int SQLITE_FCNTL_DATA_VERSION = 35;

const int SQLITE_FCNTL_SIZE_LIMIT = 36;

const int SQLITE_FCNTL_CKPT_DONE = 37;

const int SQLITE_FCNTL_RESERVE_BYTES = 38;

const int SQLITE_FCNTL_CKPT_START = 39;

const int SQLITE_FCNTL_EXTERNAL_READER = 40;

const int SQLITE_FCNTL_CKSM_FILE = 41;

const int SQLITE_FCNTL_RESET_CACHE = 42;

const int SQLITE_FCNTL_NULL_IO = 43;

const int SQLITE_FCNTL_BLOCK_ON_CONNECT = 44;

const int SQLITE_GET_LOCKPROXYFILE = 2;

const int SQLITE_SET_LOCKPROXYFILE = 3;

const int SQLITE_LAST_ERRNO = 4;

const int SQLITE_ACCESS_EXISTS = 0;

const int SQLITE_ACCESS_READWRITE = 1;

const int SQLITE_ACCESS_READ = 2;

const int SQLITE_SHM_UNLOCK = 1;

const int SQLITE_SHM_LOCK = 2;

const int SQLITE_SHM_SHARED = 4;

const int SQLITE_SHM_EXCLUSIVE = 8;

const int SQLITE_SHM_NLOCK = 8;

const int SQLITE_CONFIG_SINGLETHREAD = 1;

const int SQLITE_CONFIG_MULTITHREAD = 2;

const int SQLITE_CONFIG_SERIALIZED = 3;

const int SQLITE_CONFIG_MALLOC = 4;

const int SQLITE_CONFIG_GETMALLOC = 5;

const int SQLITE_CONFIG_SCRATCH = 6;

const int SQLITE_CONFIG_PAGECACHE = 7;

const int SQLITE_CONFIG_HEAP = 8;

const int SQLITE_CONFIG_MEMSTATUS = 9;

const int SQLITE_CONFIG_MUTEX = 10;

const int SQLITE_CONFIG_GETMUTEX = 11;

const int SQLITE_CONFIG_LOOKASIDE = 13;

const int SQLITE_CONFIG_PCACHE = 14;

const int SQLITE_CONFIG_GETPCACHE = 15;

const int SQLITE_CONFIG_LOG = 16;

const int SQLITE_CONFIG_URI = 17;

const int SQLITE_CONFIG_PCACHE2 = 18;

const int SQLITE_CONFIG_GETPCACHE2 = 19;

const int SQLITE_CONFIG_COVERING_INDEX_SCAN = 20;

const int SQLITE_CONFIG_SQLLOG = 21;

const int SQLITE_CONFIG_MMAP_SIZE = 22;

const int SQLITE_CONFIG_WIN32_HEAPSIZE = 23;

const int SQLITE_CONFIG_PCACHE_HDRSZ = 24;

const int SQLITE_CONFIG_PMASZ = 25;

const int SQLITE_CONFIG_STMTJRNL_SPILL = 26;

const int SQLITE_CONFIG_SMALL_MALLOC = 27;

const int SQLITE_CONFIG_SORTERREF_SIZE = 28;

const int SQLITE_CONFIG_MEMDB_MAXSIZE = 29;

const int SQLITE_CONFIG_ROWID_IN_VIEW = 30;

const int SQLITE_DBCONFIG_MAINDBNAME = 1000;

const int SQLITE_DBCONFIG_LOOKASIDE = 1001;

const int SQLITE_DBCONFIG_ENABLE_FKEY = 1002;

const int SQLITE_DBCONFIG_ENABLE_TRIGGER = 1003;

const int SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER = 1004;

const int SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION = 1005;

const int SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE = 1006;

const int SQLITE_DBCONFIG_ENABLE_QPSG = 1007;

const int SQLITE_DBCONFIG_TRIGGER_EQP = 1008;

const int SQLITE_DBCONFIG_RESET_DATABASE = 1009;

const int SQLITE_DBCONFIG_DEFENSIVE = 1010;

const int SQLITE_DBCONFIG_WRITABLE_SCHEMA = 1011;

const int SQLITE_DBCONFIG_LEGACY_ALTER_TABLE = 1012;

const int SQLITE_DBCONFIG_DQS_DML = 1013;

const int SQLITE_DBCONFIG_DQS_DDL = 1014;

const int SQLITE_DBCONFIG_ENABLE_VIEW = 1015;

const int SQLITE_DBCONFIG_LEGACY_FILE_FORMAT = 1016;

const int SQLITE_DBCONFIG_TRUSTED_SCHEMA = 1017;

const int SQLITE_DBCONFIG_STMT_SCANSTATUS = 1018;

const int SQLITE_DBCONFIG_REVERSE_SCANORDER = 1019;

const int SQLITE_DBCONFIG_ENABLE_ATTACH_CREATE = 1020;

const int SQLITE_DBCONFIG_ENABLE_ATTACH_WRITE = 1021;

const int SQLITE_DBCONFIG_ENABLE_COMMENTS = 1022;

const int SQLITE_DBCONFIG_MAX = 1022;

const int SQLITE_SETLK_BLOCK_ON_CONNECT = 1;

const int SQLITE_DENY = 1;

const int SQLITE_IGNORE = 2;

const int SQLITE_CREATE_INDEX = 1;

const int SQLITE_CREATE_TABLE = 2;

const int SQLITE_CREATE_TEMP_INDEX = 3;

const int SQLITE_CREATE_TEMP_TABLE = 4;

const int SQLITE_CREATE_TEMP_TRIGGER = 5;

const int SQLITE_CREATE_TEMP_VIEW = 6;

const int SQLITE_CREATE_TRIGGER = 7;

const int SQLITE_CREATE_VIEW = 8;

const int SQLITE_DELETE = 9;

const int SQLITE_DROP_INDEX = 10;

const int SQLITE_DROP_TABLE = 11;

const int SQLITE_DROP_TEMP_INDEX = 12;

const int SQLITE_DROP_TEMP_TABLE = 13;

const int SQLITE_DROP_TEMP_TRIGGER = 14;

const int SQLITE_DROP_TEMP_VIEW = 15;

const int SQLITE_DROP_TRIGGER = 16;

const int SQLITE_DROP_VIEW = 17;

const int SQLITE_INSERT = 18;

const int SQLITE_PRAGMA = 19;

const int SQLITE_READ = 20;

const int SQLITE_SELECT = 21;

const int SQLITE_TRANSACTION = 22;

const int SQLITE_UPDATE = 23;

const int SQLITE_ATTACH = 24;

const int SQLITE_DETACH = 25;

const int SQLITE_ALTER_TABLE = 26;

const int SQLITE_REINDEX = 27;

const int SQLITE_ANALYZE = 28;

const int SQLITE_CREATE_VTABLE = 29;

const int SQLITE_DROP_VTABLE = 30;

const int SQLITE_FUNCTION = 31;

const int SQLITE_SAVEPOINT = 32;

const int SQLITE_COPY = 0;

const int SQLITE_RECURSIVE = 33;

const int SQLITE_TRACE_STMT = 1;

const int SQLITE_TRACE_PROFILE = 2;

const int SQLITE_TRACE_ROW = 4;

const int SQLITE_TRACE_CLOSE = 8;

const int SQLITE_LIMIT_LENGTH = 0;

const int SQLITE_LIMIT_SQL_LENGTH = 1;

const int SQLITE_LIMIT_COLUMN = 2;

const int SQLITE_LIMIT_EXPR_DEPTH = 3;

const int SQLITE_LIMIT_COMPOUND_SELECT = 4;

const int SQLITE_LIMIT_VDBE_OP = 5;

const int SQLITE_LIMIT_FUNCTION_ARG = 6;

const int SQLITE_LIMIT_ATTACHED = 7;

const int SQLITE_LIMIT_LIKE_PATTERN_LENGTH = 8;

const int SQLITE_LIMIT_VARIABLE_NUMBER = 9;

const int SQLITE_LIMIT_TRIGGER_DEPTH = 10;

const int SQLITE_LIMIT_WORKER_THREADS = 11;

const int SQLITE_PREPARE_PERSISTENT = 1;

const int SQLITE_PREPARE_NORMALIZE = 2;

const int SQLITE_PREPARE_NO_VTAB = 4;

const int SQLITE_PREPARE_DONT_LOG = 16;

const int SQLITE_INTEGER = 1;

const int SQLITE_FLOAT = 2;

const int SQLITE_BLOB = 4;

const int SQLITE_NULL = 5;

const int SQLITE_TEXT = 3;

const int SQLITE3_TEXT = 3;

const int SQLITE_UTF8 = 1;

const int SQLITE_UTF16LE = 2;

const int SQLITE_UTF16BE = 3;

const int SQLITE_UTF16 = 4;

const int SQLITE_ANY = 5;

const int SQLITE_UTF16_ALIGNED = 8;

const int SQLITE_DETERMINISTIC = 2048;

const int SQLITE_DIRECTONLY = 524288;

const int SQLITE_SUBTYPE = 1048576;

const int SQLITE_INNOCUOUS = 2097152;

const int SQLITE_RESULT_SUBTYPE = 16777216;

const int SQLITE_SELFORDER1 = 33554432;

const int SQLITE_WIN32_DATA_DIRECTORY_TYPE = 1;

const int SQLITE_WIN32_TEMP_DIRECTORY_TYPE = 2;

const int SQLITE_TXN_NONE = 0;

const int SQLITE_TXN_READ = 1;

const int SQLITE_TXN_WRITE = 2;

const int SQLITE_INDEX_SCAN_UNIQUE = 1;

const int SQLITE_INDEX_SCAN_HEX = 2;

const int SQLITE_INDEX_CONSTRAINT_EQ = 2;

const int SQLITE_INDEX_CONSTRAINT_GT = 4;

const int SQLITE_INDEX_CONSTRAINT_LE = 8;

const int SQLITE_INDEX_CONSTRAINT_LT = 16;

const int SQLITE_INDEX_CONSTRAINT_GE = 32;

const int SQLITE_INDEX_CONSTRAINT_MATCH = 64;

const int SQLITE_INDEX_CONSTRAINT_LIKE = 65;

const int SQLITE_INDEX_CONSTRAINT_GLOB = 66;

const int SQLITE_INDEX_CONSTRAINT_REGEXP = 67;

const int SQLITE_INDEX_CONSTRAINT_NE = 68;

const int SQLITE_INDEX_CONSTRAINT_ISNOT = 69;

const int SQLITE_INDEX_CONSTRAINT_ISNOTNULL = 70;

const int SQLITE_INDEX_CONSTRAINT_ISNULL = 71;

const int SQLITE_INDEX_CONSTRAINT_IS = 72;

const int SQLITE_INDEX_CONSTRAINT_LIMIT = 73;

const int SQLITE_INDEX_CONSTRAINT_OFFSET = 74;

const int SQLITE_INDEX_CONSTRAINT_FUNCTION = 150;

const int SQLITE_MUTEX_FAST = 0;

const int SQLITE_MUTEX_RECURSIVE = 1;

const int SQLITE_MUTEX_STATIC_MAIN = 2;

const int SQLITE_MUTEX_STATIC_MEM = 3;

const int SQLITE_MUTEX_STATIC_MEM2 = 4;

const int SQLITE_MUTEX_STATIC_OPEN = 4;

const int SQLITE_MUTEX_STATIC_PRNG = 5;

const int SQLITE_MUTEX_STATIC_LRU = 6;

const int SQLITE_MUTEX_STATIC_LRU2 = 7;

const int SQLITE_MUTEX_STATIC_PMEM = 7;

const int SQLITE_MUTEX_STATIC_APP1 = 8;

const int SQLITE_MUTEX_STATIC_APP2 = 9;

const int SQLITE_MUTEX_STATIC_APP3 = 10;

const int SQLITE_MUTEX_STATIC_VFS1 = 11;

const int SQLITE_MUTEX_STATIC_VFS2 = 12;

const int SQLITE_MUTEX_STATIC_VFS3 = 13;

const int SQLITE_MUTEX_STATIC_MASTER = 2;

const int SQLITE_TESTCTRL_FIRST = 5;

const int SQLITE_TESTCTRL_PRNG_SAVE = 5;

const int SQLITE_TESTCTRL_PRNG_RESTORE = 6;

const int SQLITE_TESTCTRL_PRNG_RESET = 7;

const int SQLITE_TESTCTRL_FK_NO_ACTION = 7;

const int SQLITE_TESTCTRL_BITVEC_TEST = 8;

const int SQLITE_TESTCTRL_FAULT_INSTALL = 9;

const int SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS = 10;

const int SQLITE_TESTCTRL_PENDING_BYTE = 11;

const int SQLITE_TESTCTRL_ASSERT = 12;

const int SQLITE_TESTCTRL_ALWAYS = 13;

const int SQLITE_TESTCTRL_RESERVE = 14;

const int SQLITE_TESTCTRL_JSON_SELFCHECK = 14;

const int SQLITE_TESTCTRL_OPTIMIZATIONS = 15;

const int SQLITE_TESTCTRL_ISKEYWORD = 16;

const int SQLITE_TESTCTRL_GETOPT = 16;

const int SQLITE_TESTCTRL_SCRATCHMALLOC = 17;

const int SQLITE_TESTCTRL_INTERNAL_FUNCTIONS = 17;

const int SQLITE_TESTCTRL_LOCALTIME_FAULT = 18;

const int SQLITE_TESTCTRL_EXPLAIN_STMT = 19;

const int SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD = 19;

const int SQLITE_TESTCTRL_NEVER_CORRUPT = 20;

const int SQLITE_TESTCTRL_VDBE_COVERAGE = 21;

const int SQLITE_TESTCTRL_BYTEORDER = 22;

const int SQLITE_TESTCTRL_ISINIT = 23;

const int SQLITE_TESTCTRL_SORTER_MMAP = 24;

const int SQLITE_TESTCTRL_IMPOSTER = 25;

const int SQLITE_TESTCTRL_PARSER_COVERAGE = 26;

const int SQLITE_TESTCTRL_RESULT_INTREAL = 27;

const int SQLITE_TESTCTRL_PRNG_SEED = 28;

const int SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS = 29;

const int SQLITE_TESTCTRL_SEEK_COUNT = 30;

const int SQLITE_TESTCTRL_TRACEFLAGS = 31;

const int SQLITE_TESTCTRL_TUNE = 32;

const int SQLITE_TESTCTRL_LOGEST = 33;

const int SQLITE_TESTCTRL_USELONGDOUBLE = 34;

const int SQLITE_TESTCTRL_LAST = 34;

const int SQLITE_STATUS_MEMORY_USED = 0;

const int SQLITE_STATUS_PAGECACHE_USED = 1;

const int SQLITE_STATUS_PAGECACHE_OVERFLOW = 2;

const int SQLITE_STATUS_SCRATCH_USED = 3;

const int SQLITE_STATUS_SCRATCH_OVERFLOW = 4;

const int SQLITE_STATUS_MALLOC_SIZE = 5;

const int SQLITE_STATUS_PARSER_STACK = 6;

const int SQLITE_STATUS_PAGECACHE_SIZE = 7;

const int SQLITE_STATUS_SCRATCH_SIZE = 8;

const int SQLITE_STATUS_MALLOC_COUNT = 9;

const int SQLITE_DBSTATUS_LOOKASIDE_USED = 0;

const int SQLITE_DBSTATUS_CACHE_USED = 1;

const int SQLITE_DBSTATUS_SCHEMA_USED = 2;

const int SQLITE_DBSTATUS_STMT_USED = 3;

const int SQLITE_DBSTATUS_LOOKASIDE_HIT = 4;

const int SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE = 5;

const int SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL = 6;

const int SQLITE_DBSTATUS_CACHE_HIT = 7;

const int SQLITE_DBSTATUS_CACHE_MISS = 8;

const int SQLITE_DBSTATUS_CACHE_WRITE = 9;

const int SQLITE_DBSTATUS_DEFERRED_FKS = 10;

const int SQLITE_DBSTATUS_CACHE_USED_SHARED = 11;

const int SQLITE_DBSTATUS_CACHE_SPILL = 12;

const int SQLITE_DBSTATUS_MAX = 12;

const int SQLITE_STMTSTATUS_FULLSCAN_STEP = 1;

const int SQLITE_STMTSTATUS_SORT = 2;

const int SQLITE_STMTSTATUS_AUTOINDEX = 3;

const int SQLITE_STMTSTATUS_VM_STEP = 4;

const int SQLITE_STMTSTATUS_REPREPARE = 5;

const int SQLITE_STMTSTATUS_RUN = 6;

const int SQLITE_STMTSTATUS_FILTER_MISS = 7;

const int SQLITE_STMTSTATUS_FILTER_HIT = 8;

const int SQLITE_STMTSTATUS_MEMUSED = 99;

const int SQLITE_CHECKPOINT_PASSIVE = 0;

const int SQLITE_CHECKPOINT_FULL = 1;

const int SQLITE_CHECKPOINT_RESTART = 2;

const int SQLITE_CHECKPOINT_TRUNCATE = 3;

const int SQLITE_VTAB_CONSTRAINT_SUPPORT = 1;

const int SQLITE_VTAB_INNOCUOUS = 2;

const int SQLITE_VTAB_DIRECTONLY = 3;

const int SQLITE_VTAB_USES_ALL_SCHEMAS = 4;

const int SQLITE_ROLLBACK = 1;

const int SQLITE_FAIL = 3;

const int SQLITE_REPLACE = 5;

const int SQLITE_SCANSTAT_NLOOP = 0;

const int SQLITE_SCANSTAT_NVISIT = 1;

const int SQLITE_SCANSTAT_EST = 2;

const int SQLITE_SCANSTAT_NAME = 3;

const int SQLITE_SCANSTAT_EXPLAIN = 4;

const int SQLITE_SCANSTAT_SELECTID = 5;

const int SQLITE_SCANSTAT_PARENTID = 6;

const int SQLITE_SCANSTAT_NCYCLE = 7;

const int SQLITE_SCANSTAT_COMPLEX = 1;

const int SQLITE_SERIALIZE_NOCOPY = 1;

const int SQLITE_DESERIALIZE_FREEONCLOSE = 1;

const int SQLITE_DESERIALIZE_RESIZEABLE = 2;

const int SQLITE_DESERIALIZE_READONLY = 4;

const int NOT_WITHIN = 0;

const int PARTLY_WITHIN = 1;

const int FULLY_WITHIN = 2;

const int FTS5_TOKENIZE_QUERY = 1;

const int FTS5_TOKENIZE_PREFIX = 2;

const int FTS5_TOKENIZE_DOCUMENT = 4;

const int FTS5_TOKENIZE_AUX = 8;

const int FTS5_TOKEN_COLOCATED = 1;
